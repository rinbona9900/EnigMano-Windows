name: "⚡ EnigMano GCRD Windows — Magical v4"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      NEW_USERNAME:
        description: "New local admin to create and auto-logon"
        required: true
        default: "Shahzaib"
      SETUP_CMD_OR_CODE:
        description: "Paste full 'Set up via SSH' command OR just the OAuth code starting with 4/"
        required: true
        default: ""
      DISPLAY_WIDTH:
        description: "Headless display width"
        required: true
        default: "1920"
      DISPLAY_HEIGHT:
        description: "Headless display height"
        required: true
        default: "1080"
      TTL_MINUTES:
        description: "Keep-alive duration for this session"
        required: true
        default: "120"

permissions:
  contents: read

concurrency:
  group: enigmano-gcrd
  cancel-in-progress: true

jobs:
  setup:
    runs-on: windows-latest
    timeout-minutes: 340
    env:
      INSTANCE:            ${{ inputs.INSTANCE }}
      RAW_SETUP:           ${{ inputs.SETUP_CMD_OR_CODE }}
      NEW_USERNAME:        ${{ inputs.NEW_USERNAME }}
      RAW_TTL:             ${{ inputs.TTL_MINUTES }}
      DISP_W:              ${{ inputs.DISPLAY_WIDTH }}
      DISP_H:              ${{ inputs.DISPLAY_HEIGHT }}
      # Fixed creds per your spec (masked in logs):
      DEFAULT_PASS:        "EnigMan0"
      FIXED_GCRD_PIN:      "36446266"
      MSI_URL:             https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi

    steps:
      - name: "Create admin → harden → autologon → CRD install/register → ensure user session → enforce resolution"
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # ---------- Inputs ----------
          $instance   = $env:INSTANCE.Trim()
          $TargetUser = $env:NEW_USERNAME.Trim()
          $setupInput = $env:RAW_SETUP.Trim()

          $DefaultPass = $env:DEFAULT_PASS
          $CRD_PIN     = $env:FIXED_GCRD_PIN
          $W           = [int]$env:DISP_W
          $H           = [int]$env:DISP_H

          $ttlStr = $env:RAW_TTL.Trim()
          $tmp = 0; if (-not [int]::TryParse($ttlStr, [ref]$tmp)) { $ttlStr = "120" }
          $ttl = [int]$ttlStr; if ($ttl -lt 10) { $ttl = 10 }

          Write-Output "::add-mask::$DefaultPass"
          Write-Output "::add-mask::$CRD_PIN"

          $CRD_NAME = "EnigMano-$instance-$($env:GITHUB_RUN_NUMBER)"
          "TTL_MIN=$ttl"       | Out-File -FilePath $env:GITHUB_ENV -Append
          "CRD_NAME=$CRD_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append

          # ==========================================================
          # 1) Create the NEW USER first (ensure admin)
          # ==========================================================
          if (-not (Get-LocalUser -Name $TargetUser -ErrorAction SilentlyContinue)) {
            net user $TargetUser "$DefaultPass" /add
          } else {
            net user $TargetUser "$DefaultPass"
          }
          Start-Sleep -Seconds 2
          net localgroup Administrators $TargetUser /add
          Start-Sleep -Seconds 2
          if (Get-Command Set-LocalUser -ErrorAction SilentlyContinue) {
            try { Set-LocalUser -Name $TargetUser -PasswordNeverExpires $true } catch {}
          }
          Start-Sleep -Seconds 2

          # Hide & disable all other local users (keep behavior)
          $hideKey = "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList"
          reg add "$hideKey" /f | Out-Null
          Get-LocalUser | ForEach-Object {
            $name = $_.Name
            if ($name -ne $TargetUser) {
              try { net user $name "$DefaultPass" | Out-Null } catch {}
              try { Disable-LocalUser -Name $name -ErrorAction SilentlyContinue } catch {}
              try { reg add "$hideKey" /v "$name" /t REG_DWORD /d 0 /f | Out-Null } catch {}
            }
          }
          Start-Sleep -Seconds 2

          # ==========================================================
          # 2) AutoAdminLogon to the NEW user (logon to new user)
          # ==========================================================
          $wl = "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
          & reg add "$wl" /v AutoAdminLogon    /t REG_SZ    /d "1"            /f | Out-Null
          & reg add "$wl" /v ForceAutoLogon    /t REG_DWORD /d 1              /f | Out-Null
          & reg add "$wl" /v DefaultUserName   /t REG_SZ    /d "$TargetUser"  /f | Out-Null
          & reg add "$wl" /v DefaultDomainName /t REG_SZ    /d "$env:COMPUTERNAME" /f | Out-Null
          & reg add "$wl" /v DefaultPassword   /t REG_SZ    /d "$DefaultPass" /f | Out-Null
          # Keep sign-in surface tidy
          reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v DontDisplayLastUsername /t REG_DWORD /d 1 /f | Out-Null
          reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v HideFastUserSwitching  /t REG_DWORD /d 1 /f | Out-Null
          Start-Sleep -Seconds 3

          # RDP informational (doesn't open inbound on GH)
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          Set-Service -Name TermService -StartupType Automatic
          try { Start-Service TermService } catch {}
          Start-Sleep -Seconds 2

          # ==========================================================
          # 3) Ensure the NEW user is "logged on" (session proof)
          #    We run a user-scoped task NOW that writes a sentinel file.
          #    This also fully loads HKU\<SID> for per-user registry ops.
          # ==========================================================
          $sid = (Get-LocalUser -Name $TargetUser).Sid.Value
          $st  = (Get-Date).AddMinutes(2).ToString('HH:mm')

          $logonTask = "Enig-Logon-Proof-$CRD_NAME"
          $logonCmd  = Join-Path $env:TEMP "logon_proof.cmd"
          # Writes a per-user TEMP sentinel and prints whoami
          "@echo off`r`nwhoami > %TEMP%\enig_whoami.txt`r`necho ok > %TEMP%\enig_logon.ok`r`nexit /b 0" | Out-File -FilePath $logonCmd -Encoding ASCII -Force

          schtasks /delete /tn "$logonTask" /f | Out-Null 2>$null
          schtasks /create /tn "$logonTask" /tr "$logonCmd" /sc ONCE /st $st /RL HIGHEST /RU "$env:COMPUTERNAME\$TargetUser" /RP "$DefaultPass" /F | Out-Null
          Start-Sleep -Seconds 3
          schtasks /run /tn "$logonTask" | Out-Null
          Start-Sleep -Seconds 10

          # Wait up to ~45s for HKU\<SID> mount + sentinel
          $profilePath = $null
          for ($i=0; $i -lt 45; $i++) {
            if (-not $profilePath) {
              $profilePath = (Get-CimInstance Win32_UserProfile -ErrorAction SilentlyContinue | Where-Object { $_.SID -eq $sid }).LocalPath
            }
            $mounted = Test-Path "Registry::HKEY_USERS\$sid"
            $sentinel = $false
            if ($profilePath) {
              $sentinelPath = Join-Path $profilePath "AppData\Local\Temp\enig_logon.ok"
              $sentinel = Test-Path $sentinelPath
            }
            if ($mounted -and $profilePath -and $sentinel) { break }
            Start-Sleep -Seconds 1
          }

          # ==========================================================
          # 4) Install CRD host & register (under NEW user)
          # ==========================================================
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          Invoke-WebRequest -Uri "${{ env.MSI_URL }}" -OutFile $msi
          Start-Process -FilePath "msiexec.exe" -ArgumentList @("/i", $msi, "/qn", "/norestart") -Wait
          Start-Sleep -Seconds 3

          # Discover remoting_start_host.exe robustly
          $pf86   = [Environment]::GetFolderPath('ProgramFilesX86')
          $CRD_EXE = $null
          $cand = Get-ChildItem -Path (Join-Path $pf86 'Google\Chrome Remote Desktop') -Recurse -Filter "remoting_start_host.exe" -ErrorAction SilentlyContinue | Sort-Object FullName -Descending | Select-Object -First 1
          if ($cand) { $CRD_EXE = $cand.FullName } else {
            $CRD_EXE = Join-Path $pf86 'Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe'
          }
          if (-not (Test-Path $CRD_EXE)) { throw "remoting_start_host.exe not found at: $CRD_EXE" }

          # CRD policy & service
          reg add HKLM\Software\Policies\Google\Chrome /v RemoteAccessHostRequireCurtain /d 1 /t REG_DWORD /f | Out-Null
          $svc = Get-Service -Name chromoting -ErrorAction SilentlyContinue
          if ($svc) { sc.exe config chromoting start= auto | Out-Null }
          Start-Sleep -Seconds 2

          # Parse OAuth code permissively
          $code = $null
          if ($setupInput -match 'code="?([^"\s]+)"?') { $code = $Matches[1] }
          elseif ($setupInput -match '(4\/[\w\-\.\~]+)') { $code = $Matches[1] }
          if (-not $code) { throw "No OAuth code detected. Paste full command w/ --code=... or the code starting with '4/'." }
          Write-Output "::add-mask::$code"

          # Register CRD under the new user (scheduled task, reliable)
          $args = @(
            "--code=""$code"""
            "--redirect-url=""https://remotedesktop.google.com/_/oauthredirect"""
            "--name=""$CRD_NAME"""
            "--pin=""$CRD_PIN"""
          ) -join " "

          $regTask = "CRD-Register-$CRD_NAME"
          $regCmd  = Join-Path $env:TEMP "crd_register.cmd"
          "@echo off`r`n""$CRD_EXE"" $args`r`nexit /b %errorlevel%" | Out-File -FilePath $regCmd -Encoding ASCII -Force

          schtasks /delete /tn "$regTask" /f | Out-Null 2>$null
          schtasks /create /tn "$regTask" /tr "$regCmd" /sc ONCE /st $st /RL HIGHEST /RU "$env:COMPUTERNAME\$TargetUser" /RP "$DefaultPass" /F | Out-Null
          Start-Sleep -Seconds 3
          schtasks /run /tn "$regTask" | Out-Null
          Start-Sleep -Seconds 12

          # ==========================================================
          # 5) Enforce 1920×1080 (or requested) + DPI=100% (per-user)
          # ==========================================================
          # Per-user DPI directly in HKU\<SID>
          if (Test-Path "Registry::HKEY_USERS\$sid") {
            reg add "HKU\$sid\Control Panel\Desktop" /v LogPixels /t REG_DWORD /d 96 /f | Out-Null
            reg add "HKU\$sid\Control Panel\Desktop" /v Win8DpiScaling /t REG_DWORD /d 0  /f | Out-Null
          }

          # System headless resolution
          function Set-HeadlessRes {
            param([int]$W = 1920, [int]$H = 1080)
            $gfxRoot = "HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers\Configuration"
            if (Test-Path $gfxRoot) {
              Get-ChildItem $gfxRoot -ErrorAction SilentlyContinue | ForEach-Object {
                $k1 = Join-Path $_.PSPath "00"
                $k2 = Join-Path $k1 "00"
                try {
                  New-Item -Path $k1 -Force | Out-Null
                  New-Item -Path $k2 -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cx" -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cy" -Value $H -PropertyType DWord -Force | Out-Null
                  # 32bpp stride: bytes per line = W * 4
                  New-ItemProperty -Path $k1 -Name "Stride"         -Value ([int]($W * 4)) -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cx"  -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cy"  -Value $H -PropertyType DWord -Force | Out-Null
                } catch {}
              }
            }
          }
          Set-HeadlessRes -W $W -H $H
          Start-Sleep -Seconds 2

          # Best-effort apply by toggling display adapter (headless-safe)
          try {
            Import-Module PnpDevice -ErrorAction SilentlyContinue
            $disp = Get-PnpDevice -Class Display -Status OK -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($disp) {
              Disable-PnpDevice -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
              Start-Sleep -Seconds 2
              Enable-PnpDevice  -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
            }
          } catch {}

          # Ensure CRD service is running
          function TryStart([string]$name) {
            $ErrorActionPreference = "Continue"
            $s = Get-Service -Name $name -ErrorAction SilentlyContinue
            if ($s) {
              sc.exe config $name start= auto | Out-Null
              for ($i=0; $i -lt 8; $i++) {
                try { Start-Service $name -ErrorAction Stop } catch { Start-Sleep -Seconds 5; continue }
                $s = Get-Service -Name $name -ErrorAction SilentlyContinue
                if ($s.Status -eq 'Running') { return $true }
                Start-Sleep -Seconds 3
              }
            }
            return $false
          }
          $null = TryStart "chromoting"

          # ==========================================================
          # Diagnostics (proofs)
          # ==========================================================
          Write-Host "=== User session proof ==="
          if ($profilePath) { Write-Host "Profile: $profilePath" }
          if ($sentinelPath) {
            $hasSentinel = Test-Path $sentinelPath
            Write-Host "Sentinel present: $hasSentinel ($sentinelPath)"
            if ($hasSentinel) { Get-Content $sentinelPath -ErrorAction SilentlyContinue | Out-Null }
          }
          Write-Host "`nHKU mounted: " (Test-Path "Registry::HKEY_USERS\$sid")

          Write-Host "`n=== query user / qwinsta (best-effort) ==="
          try { cmd /c quser } catch {}
          try { cmd /c qwinsta } catch {}

          Write-Host "`n=== CRD Service Status ==="
          Get-Service -Name chromoting -ErrorAction SilentlyContinue | Format-Table -Auto
          Get-Service -DisplayName "Chrome Remote Desktop Service" -ErrorAction SilentlyContinue | Format-Table -Auto

          Write-Host "`n=== Host log (tail) ==="
          $log = "C:\ProgramData\Google\Chrome Remote Desktop\host.log"
          if (Test-Path $log) { Get-Content $log -Tail 150 }

          Write-Host "`n=== Accounts (post-enforcement) ==="
          Get-LocalUser | Select-Object Name,Enabled | Format-Table -Auto

          Write-Host "`n=== AutoAdminLogon Target ==="
          Write-Host "Will auto-logon as: $TargetUser"

          Write-Host "`n=== Display Devices ==="
          try { Get-PnpDevice -Class Display -ErrorAction SilentlyContinue | Format-Table -Auto } catch {}

      - name: "Connect instructions + keep alive"
        if: ${{ always() }}
        shell: pwsh
        run: |
          Write-Host "====================================================="
          Write-Host " ✅ Chrome Remote Desktop registration attempted."
          Write-Host "    Name: $env:CRD_NAME"
          Write-Host "    Sign into the SAME Google account used to create the code,"
          Write-Host "    then open: https://remotedesktop.google.com/access"
          Write-Host "    Your host should appear as: $env:CRD_NAME"
          Write-Host "-----------------------------------------------------"
          Write-Host "New user was created as an Administrator and set for AutoAdminLogon."
          Write-Host "Session proof task wrote a sentinel in the user's TEMP to confirm profile load."
          Write-Host "Headless display set to $env:DISP_W x $env:DISP_H; DPI forced to 100%."
          Write-Host "Note: RDP is enabled locally for completeness, but GitHub-hosted"
          Write-Host "runners do not accept inbound connections from the internet."
          Write-Host "Use Chrome Remote Desktop for access."
          Write-Host "====================================================="
          Start-Sleep -Seconds (60 * [int]$env:TTL_MIN)
