name: "⚡ EnigMano GCRD Windows — Magical vNext"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      NEW_USERNAME:
        description: "New local admin to create and auto-logon"
        required: true
        default: "Shahzaib"
      SETUP_CMD_OR_CODE:
        description: "Paste full 'Set up via SSH' command OR just the OAuth code starting with 4/"
        required: true
        default: ""
      DISPLAY_WIDTH:
        description: "Headless display width"
        required: true
        default: "1920"
      DISPLAY_HEIGHT:
        description: "Headless display height"
        required: true
        default: "1080"
      TTL_MINUTES:
        description: "Keep-alive duration for this session"
        required: true
        default: "120"

permissions:
  contents: read

concurrency:
  group: enigmano-gcrd
  cancel-in-progress: true

jobs:
  setup:
    runs-on: windows-latest
    timeout-minutes: 340
    env:
      INSTANCE:       ${{ inputs.INSTANCE }}
      RAW_SETUP:      ${{ inputs.SETUP_CMD_OR_CODE }}
      NEW_USERNAME:   ${{ inputs.NEW_USERNAME }}
      RAW_TTL:        ${{ inputs.TTL_MINUTES }}
      DISP_W:         ${{ inputs.DISPLAY_WIDTH }}
      DISP_H:         ${{ inputs.DISPLAY_HEIGHT }}
      # Fixed per your spec:
      DEFAULT_PASS:   "EnigMan0"
      FIXED_GCRD_PIN: "36446266"
      REDIRECT_URL:   "https://remotedesktop.google.com/_/oauthredirect"
      MSI_URL:        https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi

    steps:
      - name: "Create admin → autologon → CRD install/register → headless display → warm-in session"
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # -------- Inputs & basics --------
          $instance   = $env:INSTANCE.Trim()
          $TargetUser = $env:NEW_USERNAME.Trim()
          $setupInput = $env:RAW_SETUP.Trim()
          $DefaultPass= $env:DEFAULT_PASS
          $CRD_PIN    = $env:FIXED_GCRD_PIN
          $W          = [int]$env:DISP_W
          $H          = [int]$env:DISP_H

          $ttlStr = $env:RAW_TTL.Trim()
          $tmp = 0; if (-not [int]::TryParse($ttlStr, [ref]$tmp)) { $ttlStr = "120" }
          $ttl = [int]$ttlStr; if ($ttl -lt 10) { $ttl = 10 }

          Write-Output "::add-mask::$DefaultPass"
          Write-Output "::add-mask::$CRD_PIN"

          $CRD_NAME = "EnigMano-$instance-$($env:GITHUB_RUN_NUMBER)"
          "TTL_MIN=$ttl"       | Out-File -FilePath $env:GITHUB_ENV -Append
          "CRD_NAME=$CRD_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append

          # -------- 1) Create the new local admin (do NOT touch others) --------
          if (-not (Get-LocalUser -Name $TargetUser -ErrorAction SilentlyContinue)) {
            net user $TargetUser "$DefaultPass" /add
          } else {
            net user $TargetUser "$DefaultPass"
          }
          Start-Sleep -Seconds 2
          net localgroup Administrators $TargetUser /add
          Start-Sleep -Seconds 2
          if (Get-Command Set-LocalUser -ErrorAction SilentlyContinue) {
            try { Set-LocalUser -Name $TargetUser -PasswordNeverExpires $true } catch {}
          }
          Start-Sleep -Seconds 2

          # -------- 2) Configure AutoAdminLogon to the new user (takes effect next boot) --------
          $wl = "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
          & reg add "$wl" /v AutoAdminLogon    /t REG_SZ    /d "1"            /f | Out-Null
          & reg add "$wl" /v ForceAutoLogon    /t REG_DWORD /d 1              /f | Out-Null
          & reg add "$wl" /v DefaultUserName   /t REG_SZ    /d "$TargetUser"  /f | Out-Null
          & reg add "$wl" /v DefaultDomainName /t REG_SZ    /d "$env:COMPUTERNAME" /f | Out-Null
          & reg add "$wl" /v DefaultPassword   /t REG_SZ    /d "$DefaultPass" /f | Out-Null
          Start-Sleep -Seconds 2

          # Keep sign-in UI tidy (optional, does NOT hide/disable anyone)
          reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v DontDisplayLastUsername /t REG_DWORD /d 1 /f | Out-Null
          reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v HideFastUserSwitching  /t REG_DWORD /d 1 /f | Out-Null
          Start-Sleep -Seconds 1

          # -------- Local RDP (informational only) --------
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          Set-Service -Name TermService -StartupType Automatic
          try { Start-Service TermService } catch {}
          Start-Sleep -Seconds 2

          # -------- 3) Install Chrome Remote Desktop Host --------
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          Invoke-WebRequest -Uri "${{ env.MSI_URL }}" -OutFile $msi
          Start-Process -FilePath "msiexec.exe" -ArgumentList @("/i", $msi, "/qn", "/norestart") -Wait
          Start-Sleep -Seconds 3

          # Discover remoting_start_host.exe robustly
          $pf86 = [Environment]::GetFolderPath('ProgramFilesX86')
          $CRD_EXE = $null
          $cand = Get-ChildItem -Path (Join-Path $pf86 'Google\Chrome Remote Desktop') -Recurse -Filter "remoting_start_host.exe" -ErrorAction SilentlyContinue | Sort-Object FullName -Descending | Select-Object -First 1
          if ($cand) { $CRD_EXE = $cand.FullName } else {
            $CRD_EXE = Join-Path $pf86 'Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe'
          }
          if (-not (Test-Path $CRD_EXE)) { throw "remoting_start_host.exe not found at: $CRD_EXE" }

          # Ensure service auto-starts
          $svc = Get-Service -Name chromoting -ErrorAction SilentlyContinue
          if ($svc) { sc.exe config chromoting start= auto | Out-Null }
          Start-Sleep -Seconds 2

          # -------- Parse OAuth code (more permissive) --------
          $code = $null
          if ($setupInput -match 'code="?([^"\s]+)"?') { $code = $Matches[1] }
          elseif ($setupInput -match '(4\/[\w\-\.\~]+)') { $code = $Matches[1] }
          if (-not $code) { throw "No OAuth code detected. Paste full command w/ --code=... or the code starting with '4/'." }
          Write-Output "::add-mask::$code"

          # -------- 4) Register CRD host as the new user (fixed PIN) --------
          $args = @(
            "--code=""$code"""
            "--redirect-url=""${{ env.REDIRECT_URL }}"""
            "--name=""$CRD_NAME"""
            "--pin=""$CRD_PIN"""
          ) -join " "

          $regTask = "CRD-Register-$CRD_NAME"
          $regCmd  = Join-Path $env:TEMP "crd_register.cmd"
          "@echo off`r`n""$CRD_EXE"" $args`r`nexit /b %errorlevel%" | Out-File -FilePath $regCmd -Encoding ASCII -Force

          # Schedule slightly in the future (avoids SCHTASKS 'parameter' race)
          $st = (Get-Date).AddMinutes(2).ToString('HH:mm')
          schtasks /delete /tn "$regTask" /f | Out-Null 2>$null
          schtasks /create /tn "$regTask" /tr "$regCmd" /sc ONCE /st $st /RL HIGHEST /RU "$env:COMPUTERNAME\$TargetUser" /RP "$DefaultPass" /F | Out-Null
          Start-Sleep -Seconds 3
          schtasks /run /tn "$regTask" | Out-Null
          Start-Sleep -Seconds 10

          # -------- 5) Ensure the user's profile is loaded (headless warm-in) --------
          # Create/run a trivial task as the user to mount HKU\<SID> now.
          $sid = (Get-LocalUser -Name $TargetUser).Sid.Value
          $warmTask = "CRD-ProfileWarmup-$CRD_NAME"
          $warmCmd  = Join-Path $env:TEMP "warmup.cmd"
          "@echo off`r`nwhoami > %TEMP%\whoami.txt`r`nstart "" "" %SystemRoot%\explorer.exe`r`nexit /b 0" | Out-File -FilePath $warmCmd -Encoding ASCII -Force
          schtasks /delete /tn "$warmTask" /f | Out-Null 2>$null
          schtasks /create /tn "$warmTask" /tr "$warmCmd" /sc ONCE /st $st /RL HIGHEST /RU "$env:COMPUTERNAME\$TargetUser" /RP "$DefaultPass" /F | Out-Null
          Start-Sleep -Seconds 3
          schtasks /run /tn "$warmTask" | Out-Null

          # Wait up to ~30s for HKU\<SID> to mount
          $mounted = $false
          for ($i=0; $i -lt 30; $i++) {
            if (Test-Path "Registry::HKEY_USERS\$sid") { $mounted = $true; break }
            Start-Sleep -Seconds 1
          }

          # -------- 6) DPI 100% (per-user) & default headless resolution --------
          if ($mounted) {
            reg add "HKU\$sid\Control Panel\Desktop" /v LogPixels /t REG_DWORD /d 96 /f | Out-Null
            reg add "HKU\$sid\Control Panel\Desktop" /v Win8DpiScaling /t REG_DWORD /d 0  /f | Out-Null
          }

          function Set-HeadlessRes {
            param([int]$W = 1920, [int]$H = 1080)
            $gfxRoot = "HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers\Configuration"
            if (Test-Path $gfxRoot) {
              Get-ChildItem $gfxRoot -ErrorAction SilentlyContinue | ForEach-Object {
                $k1 = Join-Path $_.PSPath "00"
                $k2 = Join-Path $k1 "00"
                try {
                  New-Item -Path $k1 -Force | Out-Null
                  New-Item -Path $k2 -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cx" -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cy" -Value $H -PropertyType DWord -Force | Out-Null
                  # Correct 32bpp stride (bytes/scanline)
                  New-ItemProperty -Path $k1 -Name "Stride"         -Value ([int]($W * 4)) -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cx"  -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cy"  -Value $H -PropertyType DWord -Force | Out-Null
                } catch {}
              }
            }
          }
          Set-HeadlessRes -W $W -H $H
          Start-Sleep -Seconds 2

          # Best-effort soft-apply (no reboot)
          try {
            Import-Module PnpDevice -ErrorAction SilentlyContinue
            $disp = Get-PnpDevice -Class Display -Status OK -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($disp) {
              Disable-PnpDevice -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
              Start-Sleep -Seconds 2
              Enable-PnpDevice  -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
            }
          } catch {}

          # Ensure CRD service is running
          function TryStart([string]$name) {
            $ErrorActionPreference = "Continue"
            $s = Get-Service -Name $name -ErrorAction SilentlyContinue
            if ($s) {
              sc.exe config $name start= auto | Out-Null
              for ($i=0; $i -lt 8; $i++) {
                try { Start-Service $name -ErrorAction Stop } catch { Start-Sleep -Seconds 5; continue }
                $s = Get-Service -Name $name -ErrorAction SilentlyContinue
                if ($s.Status -eq 'Running') { return $true }
                Start-Sleep -Seconds 3
              }
            }
            return $false
          }
          $null = TryStart "chromoting"

          # -------- Diagnostics --------
          Write-Host "=== CRD Service Status ==="
          Get-Service -Name chromoting -ErrorAction SilentlyContinue | Format-Table -Auto
          Get-Service -DisplayName "Chrome Remote Desktop Service" -ErrorAction SilentlyContinue | Format-Table -Auto

          Write-Host "`n=== Host log (tail) ==="
          $log = "C:\ProgramData\Google\Chrome Remote Desktop\host.log"
          if (Test-Path $log) { Get-Content $log -Tail 150 }

          Write-Host "`n=== Local Users (untouched except creation of target) ==="
          Get-LocalUser | Select-Object Name,Enabled | Format-Table -Auto

          Write-Host "`n=== AutoAdminLogon Target ==="
          Write-Host "Configured to auto-logon (next boot): $TargetUser"

          Write-Host "`n=== Session Snapshot (query user) ==="
          try { query user } catch {}

          Write-Host "`n=== Display Devices ==="
          try { Get-PnpDevice -Class Display -ErrorAction SilentlyContinue | Format-Table -Auto } catch {}

      - name: "Connect instructions + keep alive"
        if: ${{ always() }}
        shell: pwsh
        run: |
          Write-Host "====================================================="
          Write-Host " ✅ Chrome Remote Desktop registration attempted."
          Write-Host "    Name: $env:CRD_NAME"
          Write-Host "    Sign into the SAME Google account used to create the code,"
          Write-Host "    then open: https://remotedesktop.google.com/access"
          Write-Host "    Your host should appear as: $env:CRD_NAME"
          Write-Host "-----------------------------------------------------"
          Write-Host "New admin user was created and targeted for AutoAdminLogon."
          Write-Host "We also warmed-in the user's profile and launched explorer.exe headlessly via a scheduled task,"
          Write-Host "so your CRD session should land on that desktop even before a reboot."
          Write-Host "Headless display set to $env:DISP_W x $env:DISP_H; DPI set to 100% for the target user."
          Write-Host "No other users were disabled, hidden, or signed out."
          Write-Host "Note: RDP is enabled locally for completeness, but GitHub-hosted"
          Write-Host "runners do not accept inbound connections from the internet."
          Write-Host "Use Chrome Remote Desktop for access."
          Write-Host "====================================================="
          Start-Sleep -Seconds (60 * [int]$env:TTL_MIN)
