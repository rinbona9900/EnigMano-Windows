name: "⚡ EnigMano GCRD Windows — Autologon+1080p (One-Code)"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      SETUP_CMD_OR_CODE:
        description: "Paste the full 'Set up via SSH' command OR just the OAuth code starting with 4/"
        required: true
        default: ""
      NEW_USERNAME:
        description: "Create this local admin (leave blank to use runneradmin)"
        required: false
        default: "Shahzaib"
      GCRD_REDIRECT_URL:
        description: "Redirect URL from Google (leave default)"
        required: false
        default: "https://remotedesktop.google.com/_/oauthredirect"
      TTL_MINUTES:
        description: "Keep-alive duration for this session"
        required: false
        default: "120"

permissions:
  contents: read

concurrency:
  group: enigmano-gcrd
  cancel-in-progress: true

jobs:
  setup:
    runs-on: windows-latest
    timeout-minutes: 340
    env:
      INSTANCE:           ${{ inputs.INSTANCE }}
      RAW_SETUP:          ${{ inputs.SETUP_CMD_OR_CODE }}
      RAW_NEW_USERNAME:   ${{ inputs.NEW_USERNAME }}
      RAW_REDIRECT_URL:   ${{ inputs.GCRD_REDIRECT_URL }}
      RAW_TTL:            ${{ inputs.TTL_MINUTES }}

      # === Single source of truth (as requested): SAME for everything ===
      ONE_CODE: "36446266"   # Used for: Local user password, AutoAdminLogon, and CRD PIN

      MSI_URL: https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi

    steps:
      - name: Setup + Autologon + CRD + 1080p
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # ---------- Inputs / constants ----------
          $instance     = ($env:INSTANCE         | % { $_.Trim() })
          $setupInput   = ($env:RAW_SETUP        | % { $_.Trim() })
          $redirectUrl  = ($env:RAW_REDIRECT_URL | % { $_.Trim() })
          $newUser      = ($env:RAW_NEW_USERNAME | % { $_.Trim() })
          $ttlStr       = ($env:RAW_TTL          | % { $_.Trim() })
          $ONE          = ($env:ONE_CODE         | % { $_.Trim() })  # single code for all auth uses

          if (-not [int]::TryParse($ttlStr,[ref]0)) { $ttlStr = "120" }
          $ttl = [int]$ttlStr; if ($ttl -lt 10) { $ttl = 10 }
          Write-Output "::add-mask::$ONE"

          $TargetUser = if ([string]::IsNullOrWhiteSpace($newUser)) { "runneradmin" } else { $newUser }
          $CRD_NAME   = "EnigMano-$instance-$($env:GITHUB_RUN_NUMBER)"
          "TTL_MIN=$ttl"        | Out-File -FilePath $env:GITHUB_ENV -Append
          "CRD_NAME=$CRD_NAME"  | Out-File -FilePath $env:GITHUB_ENV -Append

          Start-Sleep -Seconds 2

          # ---------- Ensure target admin exists with ONE_CODE password ----------
          if ($TargetUser -eq "runneradmin") {
            net user runneradmin "$ONE"
            try { net localgroup Administrators runneradmin /add | Out-Null } catch {}
          } else {
            if (-not (Get-LocalUser -Name $TargetUser -ErrorAction SilentlyContinue)) {
              net user $TargetUser "$ONE" /add
            } else {
              net user $TargetUser "$ONE"
            }
            net localgroup Administrators $TargetUser /add
          }
          try { Set-LocalUser -Name $TargetUser -PasswordNeverExpires $true } catch {}
          Start-Sleep -Seconds 2

          # ---------- AutoAdminLogon (future boots) using ONE_CODE ----------
          $wl = "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
          reg add "$wl" /v AutoAdminLogon    /t REG_SZ    /d "1"            /f | Out-Null
          reg add "$wl" /v ForceAutoLogon    /t REG_DWORD /d 1              /f | Out-Null
          reg add "$wl" /v DefaultUserName   /t REG_SZ    /d "$TargetUser"  /f | Out-Null
          reg add "$wl" /v DefaultDomainName /t REG_SZ    /d "$env:COMPUTERNAME" /f | Out-Null
          reg add "$wl" /v DefaultPassword   /t REG_SZ    /d "$ONE"         /f | Out-Null
          # remove any legal notice blocking autologon
          reg add "$wl" /v LegalNoticeCaption /t REG_SZ /d "" /f | Out-Null
          reg add "$wl" /v LegalNoticeText    /t REG_SZ /d "" /f | Out-Null
          Start-Sleep -Seconds 2

          # ---------- Prevent sleep / screen-off ----------
          powercfg -x -monitor-timeout-ac 0
          powercfg -x -standby-timeout-ac 0
          powercfg -x -hibernate-timeout-ac 0

          # ---------- Enable local RDP (informational only) ----------
          try {
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
            Set-Service -Name TermService -StartupType Automatic
            Start-Service TermService
          } catch {}
          Start-Sleep -Seconds 2

          # ---------- Install Chrome Remote Desktop Host ----------
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          Invoke-WebRequest -Uri "${{ env.MSI_URL }}" -OutFile $msi
          Start-Process msiexec.exe -ArgumentList @("/i",$msi,"/qn","/norestart") -Wait
          Start-Sleep -Seconds 5

          # Discover host binary safely
          $pf86 = [Environment]::GetFolderPath('ProgramFilesX86'); $pf64 = $env:ProgramFiles
          $cands = @(
            (Join-Path $pf86 'Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe'),
            (Join-Path $pf64 'Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe')
          )
          $probe = Get-ChildItem -Path (Join-Path $pf86 'Google\Chrome Remote Desktop') -Recurse -Filter remoting_start_host.exe -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          if ($probe) { $cands += $probe }
          $CRD_EXE = $cands | ? { Test-Path $_ } | Select-Object -First 1
          if (-not $CRD_EXE) { throw "remoting_start_host.exe not found." }

          # Policies & service
          reg add HKLM\Software\Policies\Google\Chrome /v RemoteAccessHostRequireCurtain /d 1 /t REG_DWORD /f | Out-Null
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /d 0 /t REG_DWORD /f | Out-Null
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v SecurityLayer /d 1 /t REG_DWORD /f | Out-Null
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /d 0 /t REG_DWORD /f | Out-Null
          try { sc.exe config chromoting start= auto | Out-Null } catch {}
          Start-Sleep -Seconds 2

          # ---------- Parse OAuth code robustly ----------
          $code = $null
          if ($setupInput -match 'code="?([0-9A-Za-z\/\-\._~]+)"?') { $code = $Matches[1] }
          elseif ($setupInput -match '(4\/[0-9A-Za-z\-\._~]+)')     { $code = $Matches[1] }
          if (-not $code) { throw "No OAuth code detected. Paste full command with --code=... or the code starting with '4/'." }
          Write-Output "::add-mask::$code"

          # ---------- Register CRD (PIN = ONE_CODE) via scheduled task ----------
          $args = @("--code=""$code""","--redirect-url=""$redirectUrl""","--name=""$CRD_NAME""","--pin=""$ONE""") -join " "
          $task  = "CRD-Register-$CRD_NAME"
          $cmd   = Join-Path $env:TEMP "crd_register.cmd"
          "@echo off`r`n""$CRD_EXE"" $args`r`nexit /b %errorlevel%" | Out-File -FilePath $cmd -Encoding ASCII -Force
          $st = (Get-Date).AddMinutes(1).ToString('HH:mm')
          schtasks /create /tn "$task" /tr "$cmd" /sc ONCE /st $st /RL HIGHEST /RU "$env:COMPUTERNAME\$TargetUser" /RP "$ONE" /F | Out-Null
          Start-Sleep -Seconds 2
          schtasks /run /tn "$task" | Out-Null
          Start-Sleep -Seconds 10

          # ---------- Create a REAL logged-on desktop for TargetUser now ----------
          $sec  = ConvertTo-SecureString $ONE -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential("$env:COMPUTERNAME\$TargetUser",$sec)
          try {
            # Launch the user's shell (userinit -> explorer) to create the desktop session
            Start-Process -FilePath "$env:WINDIR\System32\userinit.exe" -ArgumentList "$env:WINDIR\explorer.exe" -Credential $cred -LoadUserProfile -WindowStyle Hidden
            Start-Sleep -Seconds 3
          } catch {
            Write-Host "Userinit launch warning: $($_.Exception.Message)"
          }

          # ---------- Selected 1920x1080 headless resolution ----------
          function Set-HeadlessRes([int]$W=1920,[int]$H=1080) {
            $gfx = "HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers\Configuration"
            if (Test-Path $gfx) {
              Get-ChildItem $gfx -EA SilentlyContinue | % {
                $k1 = Join-Path $_.PSPath "00"
                $k2 = Join-Path $k1 "00"
                try {
                  New-Item -Path $k1 -Force | Out-Null
                  New-Item -Path $k2 -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cx" -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cy" -Value $H -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "Stride"         -Value ($W*4) -PropertyType DWord -Force | Out-Null  # 32bpp
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cx"  -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cy"  -Value $H -PropertyType DWord -Force | Out-Null
                } catch {}
              }
            }
          }
          Set-HeadlessRes 1920 1080
          Start-Sleep -Seconds 2

          # Refresh display adapter to apply without reboot
          try {
            Import-Module PnpDevice -ErrorAction SilentlyContinue
            $disp = Get-PnpDevice -Class Display -Status OK -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($disp) {
              Disable-PnpDevice -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
              Start-Sleep -Seconds 3
              Enable-PnpDevice  -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
            }
          } catch {}
          Start-Sleep -Seconds 2

          # ---------- Ensure CRD service is running ----------
          function TryStart([string]$n){
            $s = Get-Service -Name $n -EA SilentlyContinue
            if ($s) {
              sc.exe config $n start= auto | Out-Null
              for ($i=0;$i -lt 8;$i++){
                try { Start-Service $n -EA Stop } catch { Start-Sleep -Seconds 3; continue }
                $s = Get-Service -Name $n -EA SilentlyContinue
                if ($s.Status -eq 'Running'){ return $true }
                Start-Sleep -Seconds 2
              }
            }
            return $false
          }
          if (-not (TryStart "chromoting")) {
            $svc2 = Get-Service -DisplayName "Chrome Remote Desktop Service" -EA SilentlyContinue
            if ($svc2) { [void](TryStart $svc2.Name) }
          }

          # ---------- Optional: keep only target user enabled ----------
          try {
            Get-LocalUser | % {
              if ($_.Name -ne $TargetUser) {
                try { Disable-LocalUser -Name $_.Name -EA SilentlyContinue } catch {}
              } else {
                try { Set-LocalUser -Name $_.Name -PasswordNeverExpires $true } catch {}
              }
            }
          } catch {}

          # ---------- Diagnostics ----------
          Write-Host "=== CRD Service Status ==="
          Get-Service -Name chromoting -EA SilentlyContinue | ft -Auto
          $log = "C:\ProgramData\Google\Chrome Remote Desktop\host.log"
          Write-Host "`n=== Host log (tail) ==="
          if (Test-Path $log) { Get-Content $log -Tail 120 }

          Write-Host "`n=== Explorer sessions by user ==="
          try {
            $procs = Get-WmiObject Win32_Process -Filter "Name='explorer.exe'"
            foreach ($p in $procs){ $null=$p.GetOwner([ref]$u,[ref]$d); if ($u){ Write-Host "Explorer: $d\$u" } }
          } catch {}

      - name: Connect instructions + keep alive
        if: ${{ always() }}
        shell: pwsh
        run: |
          Write-Host "====================================================="
          Write-Host " ✅ Chrome Remote Desktop registration attempted."
          Write-Host "    Name: $env:CRD_NAME"
          Write-Host "    Sign into the SAME Google account used to create the code,"
          Write-Host "    then open: https://remotedesktop.google.com/access"
          Write-Host "    Your host should appear as: $env:CRD_NAME"
          Write-Host "-----------------------------------------------------"
          Write-Host "Autologon: Target user is pre-launched (userinit+explorer)."
          Write-Host "Resolution: 1920x1080 applied (headless config + adapter refresh)."
          Write-Host "PIN / Password (same, per request): ******"
          Write-Host "====================================================="
          Start-Sleep -Seconds (60 * [int]$env:TTL_MIN)
