name: "⚡ EnigMano GCRD Windows"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      SETUP_CMD_OR_CODE:
        description: "Paste the full 'Set up via SSH' command OR just the OAuth code starting with 4/"
        required: true
        default: ""
      GCRD_PIN:
        description: "PIN (≥6 digits). Leave blank to auto-derive from 'EnigMano'+INSTANCE"
        required: false
        default: ""
      NEW_USERNAME:
        description: "Create this local admin (leave blank to use runneradmin)"
        required: false
        default: ""
      GCRD_REDIRECT_URL:
        description: "Redirect URL from Google (leave default)"
        required: false
        default: "https://remotedesktop.google.com/_/oauthredirect"
      TTL_MINUTES:
        description: "Keep-alive duration for this session"
        required: false
        default: "120"

permissions:
  contents: read

concurrency:
  group: enigmano-gcrd
  cancel-in-progress: true

jobs:
  setup:
    runs-on: windows-latest
    timeout-minutes: 360
    env:
      INSTANCE: ${{ inputs.INSTANCE }}
      RAW_SETUP: ${{ inputs.SETUP_CMD_OR_CODE }}
      RAW_PIN: ${{ inputs.GCRD_PIN }}
      RAW_NEW_USERNAME: ${{ inputs.NEW_USERNAME }}
      RAW_REDIRECT_URL: ${{ inputs.GCRD_REDIRECT_URL }}
      RAW_TTL: ${{ inputs.TTL_MINUTES }}
      MSI_URL: https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi

    steps:
      - name: "Normalize inputs + derive defaults (masking) → one-shot prepare + CRD install + register + verify"
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # ---------- Normalize Inputs ----------
          $instance     = ($env:INSTANCE         | ForEach-Object { $_.Trim() })
          $setupInput   = ($env:RAW_SETUP        | ForEach-Object { $_.Trim() })
          $redirectUrl  = ($env:RAW_REDIRECT_URL | ForEach-Object { $_.Trim() })
          $newUser      = ($env:RAW_NEW_USERNAME | ForEach-Object { $_.Trim() })
          $pinInput     = ($env:RAW_PIN          | ForEach-Object { $_.Trim() })
          $ttlStr       = ($env:RAW_TTL          | ForEach-Object { $_.Trim() })

          $tmp = 0
          if (-not [int]::TryParse($ttlStr, [ref]$tmp)) { $ttlStr = "120" }
          $ttl = [int]$ttlStr
          if ($ttl -lt 10) { $ttl = 10 }

          # All users MUST use this default password
          $DefaultPass = "EnigMan0"
          Write-Output "::add-mask::$DefaultPass"

          # Auto PIN if blank (12 digits)
          if ([string]::IsNullOrWhiteSpace($pinInput)) {
            $seed = "EnigMano$instance"
            $sha  = [System.Security.Cryptography.SHA256]::Create()
            $buf  = [System.Text.Encoding]::UTF8.GetBytes($seed)
            $pinInput = (($sha.ComputeHash($buf) | ForEach-Object { $_ % 10 }) -join '').Substring(0,12)
          }
          if ($pinInput -notmatch '^\d{6,}$') { throw "GCRD_PIN must be digits only and ≥ 6 characters." }
          Write-Output "::add-mask::$pinInput"

          # Target user (NEW_USERNAME or runneradmin). Force default password.
          if ([string]::IsNullOrWhiteSpace($newUser)) {
            $TargetUser = "runneradmin"
          } else {
            $TargetUser = $newUser
          }

          # Host name & TTL to env (for next step)
          "TTL_MIN=$ttl"                                              | Out-File -FilePath $env:GITHUB_ENV -Append
          $CRD_NAME = "EnigMano-$instance-$($env:GITHUB_RUN_NUMBER)"
          "CRD_NAME=$CRD_NAME"                                        | Out-File -FilePath $env:GITHUB_ENV -Append

          # ---------- Ensure Target Account (single enabled admin) ----------
          if ($TargetUser -eq "runneradmin") {
            net user runneradmin "$DefaultPass"
            try { net localgroup Administrators runneradmin /add | Out-Null } catch {}
          } else {
            if (-not (Get-LocalUser -Name $TargetUser -ErrorAction SilentlyContinue)) {
              net user $TargetUser "$DefaultPass" /add
            } else {
              net user $TargetUser "$DefaultPass"
            }
            net localgroup Administrators $TargetUser /add
          }
          if (Get-Command Set-LocalUser -ErrorAction SilentlyContinue) {
            try { Set-LocalUser -Name $TargetUser -PasswordNeverExpires $true } catch {}
          }

          # ---------- AutoAdminLogon to the TargetUser ----------
          $wl = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
          New-Item -Path $wl -Force | Out-Null
          Set-ItemProperty -Path $wl -Name "AutoAdminLogon"    -Value "1"
          Set-ItemProperty -Path $wl -Name "ForceAutoLogon"    -Type DWord -Value 1
          Set-ItemProperty -Path $wl -Name "DefaultUserName"   -Value $TargetUser
          Set-ItemProperty -Path $wl -Name "DefaultPassword"   -Value $DefaultPass
          Set-ItemProperty -Path $wl -Name "DefaultDomainName" -Value $env:COMPUTERNAME

          # ---------- Enforce ONLY one accessible account ----------
          # Disable every local user EXCEPT the TargetUser (built-ins included if possible).
          $currentUser = ([System.Security.Principal.WindowsIdentity]::GetCurrent().Name.Split('\')[-1])
          Get-LocalUser | ForEach-Object {
            $name = $_.Name
            if ($name -ne $TargetUser) {
              try { net user $name "$DefaultPass" | Out-Null } catch {}
              try { Disable-LocalUser -Name $name -ErrorAction SilentlyContinue } catch {}
            } else {
              try { net user $name "$DefaultPass" | Out-Null } catch {}
              if (Get-Command Set-LocalUser -ErrorAction SilentlyContinue) {
                try { Set-LocalUser -Name $name -PasswordNeverExpires $true } catch {}
              }
            }
          }

          # ---------- Enable RDP locally (note: GH runners are not reachable via RDP) ----------
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          Set-Service -Name TermService -StartupType Automatic
          try { Start-Service TermService } catch {}

          # ---------- Install Chrome Remote Desktop Host ----------
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          Invoke-WebRequest -Uri "$env:MSI_URL" -OutFile $msi
          Start-Process -FilePath "msiexec.exe" -ArgumentList @("/i", $msi, "/qn", "/norestart") -Wait

          $pf86 = [Environment]::GetFolderPath('ProgramFilesX86')
          $CRD_EXE = Join-Path $pf86 'Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe'
          if (-not (Test-Path $CRD_EXE)) { throw "remoting_start_host.exe not found at: $CRD_EXE" }

          # ---------- Apply CRD stability policies ----------
          reg add HKLM\Software\Policies\Google\Chrome /v RemoteAccessHostRequireCurtain /d 1 /t REG_DWORD /f | Out-Null
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /d 0 /t REG_DWORD /f | Out-Null
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v SecurityLayer /d 1 /t REG_DWORD /f | Out-Null
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /d 0 /t REG_DWORD /f | Out-Null
          $svc = Get-Service -Name chromoting -ErrorAction SilentlyContinue
          if ($svc) { sc.exe config chromoting start= auto | Out-Null }

          # ---------- Parse OAuth code from input ----------
          $code = $null
          if ($setupInput -match 'code="?([0-9A-Za-z\/\-_]+)"?') { $code = $Matches[1] }
          elseif ($setupInput -match '(4\/[0-9A-Za-z\-_]+)')     { $code = $Matches[1] }
          if (-not $code) { throw "No OAuth code detected. Paste full command w/ --code=... or the code starting with '4/'." }
          Write-Output "::add-mask::$code"

          # ---------- Build CRD args ----------
          $args = @(
            "--code=""$code"""
            "--redirect-url=""$redirectUrl"""
            "--name=""$CRD_NAME"""
            "--pin=""$pinInput"""
          ) -join " "

          # ---------- Register CRD as TargetUser via Scheduled Task ----------
          $task = "CRD-Register-$CRD_NAME"
          $cmd  = Join-Path $env:TEMP "crd_register.cmd"
          "@echo off`r`n""$CRD_EXE"" $args`r`nexit /b %errorlevel%" | Out-File -FilePath $cmd -Encoding ASCII -Force

          schtasks /create /tn "$task" /tr "$cmd" /sc ONCE /st 00:00 /RL HIGHEST /RU "$env:COMPUTERNAME\$TargetUser" /RP "$DefaultPass" /F | Out-Null
          schtasks /run /tn "$task" | Out-Null
          Start-Sleep -Seconds 10

          # ---------- Force creation of TargetUser profile (if not yet present) ----------
          $sid = (Get-LocalUser -Name $TargetUser).Sid.Value
          $profilePath = (Get-CimInstance Win32_UserProfile -ErrorAction SilentlyContinue | Where-Object { $_.SID -eq $sid }).LocalPath
          if (-not $profilePath) {
            # Run a trivial command as the user to trigger profile creation
            $task2 = "CRD-ProfileWarmup-$CRD_NAME"
            $cmd2  = Join-Path $env:TEMP "warmup.cmd"
            "@echo off`r`nwhoami > %TEMP%\whoami.txt`r`nexit /b 0" | Out-File -FilePath $cmd2 -Encoding ASCII -Force
            schtasks /create /tn "$task2" /tr "$cmd2" /sc ONCE /st 00:00 /RL HIGHEST /RU "$env:COMPUTERNAME\$TargetUser" /RP "$DefaultPass" /F | Out-Null
            schtasks /run /tn "$task2" | Out-Null
            Start-Sleep -Seconds 5
            $profilePath = (Get-CimInstance Win32_UserProfile -ErrorAction SilentlyContinue | Where-Object { $_.SID -eq $sid }).LocalPath
          }

          # ---------- TargetUser DPI scaling to 100% (host-controlled) ----------
          if ($profilePath -and (Test-Path $profilePath)) {
            $ntuser = Join-Path $profilePath "NTUSER.DAT"
            if (Test-Path $ntuser) {
              reg load "HKU\TempHive" "$ntuser" | Out-Null
              try {
                reg add "HKU\TempHive\Control Panel\Desktop" /v LogPixels /t REG_DWORD /d 96 /f | Out-Null
                reg add "HKU\TempHive\Control Panel\Desktop" /v Win8DpiScaling /t REG_DWORD /d 0 /f | Out-Null
              } finally {
                reg unload "HKU\TempHive" | Out-Null
              }
            }
          }

          # ---------- System headless resolution: force 1920x1080 (best-effort) ----------
          function Set-HeadlessRes {
            param([int]$W = 1920, [int]$H = 1080)
            $gfxRoot = "HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers\Configuration"
            if (Test-Path $gfxRoot) {
              Get-ChildItem $gfxRoot -ErrorAction SilentlyContinue | ForEach-Object {
                $k1 = Join-Path $_.PSPath "00"
                $k2 = Join-Path $k1 "00"
                try {
                  New-Item -Path $k1 -Force | Out-Null
                  New-Item -Path $k2 -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cx" -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "PrimSurfSize.cy" -Value $H -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k1 -Name "Stride"         -Value (($W * 32 + 7) / 8) -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cx"  -Value $W -PropertyType DWord -Force | Out-Null
                  New-ItemProperty -Path $k2 -Name "ActiveSize.cy"  -Value $H -PropertyType DWord -Force | Out-Null
                } catch {}
              }
            }
          }
          Set-HeadlessRes 1920 1080

          # Try to apply without reboot by toggling display adapter
          try {
            Import-Module PnpDevice -ErrorAction SilentlyContinue
            $disp = Get-PnpDevice -Class Display -Status OK -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($disp) {
              Disable-PnpDevice -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
              Start-Sleep -Seconds 2
              Enable-PnpDevice  -InstanceId $disp.InstanceId -Confirm:$false -ErrorAction SilentlyContinue | Out-Null
            }
          } catch {}

          # ---------- Start CRD service with retries ----------
          function TryStart([string]$name) {
            $ErrorActionPreference = "Continue"
            $s = Get-Service -Name $name -ErrorAction SilentlyContinue
            if ($s) {
              sc.exe config $name start= auto | Out-Null
              for ($i=0; $i -lt 8; $i++) {
                try { Start-Service $name -ErrorAction Stop } catch { Start-Sleep -Seconds 5; continue }
                $s = Get-Service -Name $name -ErrorAction SilentlyContinue
                if ($s.Status -eq 'Running') { return $true }
                Start-Sleep -Seconds 3
              }
            }
            return $false
          }
          $started = TryStart "chromoting"
          if (-not $started) {
            $svc2 = Get-Service -DisplayName "Chrome Remote Desktop Service" -ErrorAction SilentlyContinue
            if ($svc2) { [void](TryStart $svc2.Name) }
          }

          # ---------- Verify & tail logs ----------
          Write-Host "=== CRD Service Status ==="
          Get-Service -Name chromoting -ErrorAction SilentlyContinue | Format-Table -Auto
          Get-Service -DisplayName "Chrome Remote Desktop Service" -ErrorAction SilentlyContinue | Format-Table -Auto

          Write-Host "`n=== Host log (tail) ==="
          $log = "C:\ProgramData\Google\Chrome Remote Desktop\host.log"
          if (Test-Path $log) { Get-Content $log -Tail 150 }

          Write-Host "`n=== Accounts (post-enforcement) ==="
          Get-LocalUser | Select-Object Name,Enabled | Format-Table -Auto

          Write-Host "`n=== AutoAdminLogon Target ==="
          Write-Host "Will auto-logon as: $TargetUser"

          Write-Host "`n=== Display Devices ==="
          try { Get-PnpDevice -Class Display -ErrorAction SilentlyContinue | Format-Table -Auto } catch {}

      - name: "Connect instructions + keep alive"
        shell: pwsh
        run: |
          Write-Host "====================================================="
          Write-Host " ✅ Chrome Remote Desktop registration attempted."
          Write-Host "    Name: $env:CRD_NAME"
          Write-Host "    Sign into the SAME Google account used to create the code,"
          Write-Host "    then open: https://remotedesktop.google.com/access"
          Write-Host "    Your host should appear as: $env:CRD_NAME"
          Write-Host "-----------------------------------------------------"
          Write-Host "AutoAdminLogon is set. Other local users are disabled to prevent logon."
          Write-Host "Headless display forced to 1920x1080; DPI scaling set to 100%."
          Write-Host "Note: RDP is enabled locally for completeness, but GitHub-hosted"
          Write-Host "runners do not accept inbound connections from the internet."
          Write-Host "Use Chrome Remote Desktop for access."
          Write-Host "====================================================="
          Start-Sleep -Seconds (60 * [int]$env:TTL_MIN)
