name: "⚡ EnigMano GCRD Windows"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      SETUP_CMD_OR_CODE:
        description: "Paste the full 'Setup via SSH' command OR just the OAuth code starting with 4/"
        required: true
        default: ""
      GCRD_PIN:
        description: "PIN (≥6 digits). Leave blank to auto-derive from 'EnigMano'+INSTANCE"
        required: false
        default: ""
      NEW_USERNAME:
        description: "Create this local admin (leave blank to use runneradmin)"
        required: false
        default: ""
      NEW_PASSWORD:
        description: "Password for NEW_USERNAME, or for runneradmin if NEW_USERNAME is blank (default: Enigman0)"
        required: false
        default: ""
      GCRD_REDIRECT_URL:
        description: "Redirect URL from Google (leave default)"
        required: false
        default: "https://remotedesktop.google.com/_/oauthredirect"
      TTL_MINUTES:
        description: "Keep-alive duration for this session"
        required: false
        default: "120"

permissions:
  contents: read

concurrency:
  group: enigmano-gcrd
  cancel-in-progress: true

jobs:
  setup:
    runs-on: windows-latest
    timeout-minutes: 360
    env:
      # Move all user inputs into environment variables to avoid PowerShell parsing issues
      INSTANCE: ${{ inputs.INSTANCE }}
      RAW_SETUP: ${{ inputs.SETUP_CMD_OR_CODE }}
      RAW_PIN: ${{ inputs.GCRD_PIN }}
      RAW_NEW_USERNAME: ${{ inputs.NEW_USERNAME }}
      RAW_NEW_PASSWORD: ${{ inputs.NEW_PASSWORD }}
      RAW_REDIRECT_URL: ${{ inputs.GCRD_REDIRECT_URL }}
      RAW_TTL: ${{ inputs.TTL_MINUTES }}

      MSI_URL: https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi
    steps:
      - name: Normalize inputs + derive defaults (safe masking)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $instance     = ($env:INSTANCE   | ForEach-Object { $_.Trim() })
          $setupInput   = ($env:RAW_SETUP  | ForEach-Object { $_.Trim() })
          $redirectUrl  = ($env:RAW_REDIRECT_URL | ForEach-Object { $_.Trim() })
          $newUser      = ($env:RAW_NEW_USERNAME | ForEach-Object { $_.Trim() })
          $newPass      = ($env:RAW_NEW_PASSWORD | ForEach-Object { $_.Trim() })
          $pinInput     = ($env:RAW_PIN    | ForEach-Object { $_.Trim() })
          $ttlStr       = ($env:RAW_TTL    | ForEach-Object { $_.Trim() })

          if (-not [int]::TryParse($ttlStr, [ref]0)) { $ttlStr = "120" }
          $ttl = [int]$ttlStr
          if ($ttl -lt 10) { $ttl = 10 }

          if ([string]::IsNullOrWhiteSpace($pinInput)) {
            $seed = "EnigMano$instance"
            $sha  = [System.Security.Cryptography.SHA256]::Create()
            $buf  = [System.Text.Encoding]::UTF8.GetBytes($seed)
            $pinInput = (($sha.ComputeHash($buf) | ForEach-Object { $_ % 10 }) -join '').Substring(0,12)
          }

          if ([string]::IsNullOrWhiteSpace($newUser)) {
            $targetUser = "runneradmin"
            $targetPass = if ([string]::IsNullOrWhiteSpace($newPass)) { "Enigman0" } else { $newPass }
          } else {
            $targetUser = $newUser
            if ([string]::IsNullOrWhiteSpace($newPass)) { throw "NEW_PASSWORD is required when NEW_USERNAME is provided." }
            $targetPass = $newPass
          }

          # Mask sensitive values
          @($targetPass, $pinInput) | ForEach-Object { if ($_ -and $_.Length -gt 0) { Write-Output "::add-mask::$_" } }
          if ($setupInput -match 'code="?([0-9A-Za-z\/\-_]+)"?') { Write-Output "::add-mask::$($Matches[1])" }
          if ($setupInput -match '4\/[0-9A-Za-z\-_]+')        { Write-Output "::add-mask::$($Matches[0])" }

          "INSTANCE=$instance"                                        | Out-File -FilePath $env:GITHUB_ENV -Append
          "TARGET_USER=$targetUser"                                   | Out-File -FilePath $env:GITHUB_ENV -Append
          "TARGET_PASS=$targetPass"                                   | Out-File -FilePath $env:GITHUB_ENV -Append
          "PIN=$pinInput"                                             | Out-File -FilePath $env:GITHUB_ENV -Append
          "SETUP_INPUT=$setupInput"                                   | Out-File -FilePath $env:GITHUB_ENV -Append
          "REDIRECT_URL=$redirectUrl"                                 | Out-File -FilePath $env:GITHUB_ENV -Append
          "TTL_MIN=$ttl"                                              | Out-File -FilePath $env:GITHUB_ENV -Append
          "HOST_NAME=EnigMano-$instance-$($env:GITHUB_RUN_NUMBER)"    | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Ensure target account exists and is admin
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          if ($env:TARGET_USER -eq "runneradmin") {
            net user runneradmin "$env:TARGET_PASS"
            wmic useraccount where "name='runneradmin'" set PasswordExpires=FALSE | Out-Null
          } else {
            if (-not (Get-LocalUser -Name $env:TARGET_USER -ErrorAction SilentlyContinue)) {
              net user $env:TARGET_USER "$env:TARGET_PASS" /add
            } else {
              net user $env:TARGET_USER "$env:TARGET_PASS"
            }
            net localgroup Administrators $env:TARGET_USER /add
            wmic useraccount where "name='$env:TARGET_USER'" set PasswordExpires=FALSE | Out-Null
          }

      - name: Enable RDP & firewall (completeness)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          Set-Service -Name TermService -StartupType Automatic
          Start-Service TermService

      - name: Download & install Chrome Remote Desktop Host (silent)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          Invoke-WebRequest -Uri "$env:MSI_URL" -OutFile $msi
          Start-Process -FilePath "msiexec.exe" -ArgumentList @("/i", $msi, "/qn", "/norestart") -Wait
          $exe = "${Env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          if (-not (Test-Path $exe)) { throw "remoting_start_host.exe not found at: $exe" }
          "CRD_START_HOST=$exe" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Apply CRD stability policies and restart service
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          reg add HKLM\Software\Policies\Google\Chrome /v RemoteAccessHostRequireCurtain /d 1 /t REG_DWORD /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /d 0 /t REG_DWORD /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v SecurityLayer /d 1 /t REG_DWORD /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /d 0 /t REG_DWORD /f
          sc.exe query chromoting > $null 2>&1
          if ($LASTEXITCODE -eq 0) {
            net stop chromoting
            net start chromoting
          }

      - name: Build CRD start-host command (from full command OR from code)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $exe = "$env:CRD_START_HOST"
          $name = "$env:HOST_NAME"
          $inputText = "$env:SETUP_INPUT"

          function Extract-Code([string]$s) {
            if ($s -match 'code="?([0-9A-Za-z\/\-_]+)"?') { return $Matches[1] }
            if ($s -match '(^|[^A-Za-z0-9\/])(?<code>4\/[0-9A-Za-z\-_]+)($|[^A-Za-z0-9\-_])') { return $Matches['code'] }
            return $null
          }

          $code = Extract-Code $inputText
          if (-not $code) { throw "No OAuth code detected. Paste either the full command containing --code=... or the code starting with '4/'." }

          $pin = $env:PIN
          if ($pin.Length -lt 6) { throw "GCRD_PIN must be at least 6 digits." }
          if ($pin -notmatch '^\d{6,}$') { throw "GCRD_PIN must contain digits only." }

          $args = @(
            "--code=""$code"""
            "--redirect-url=""$env:REDIRECT_URL"""
            "--name=""$name"""
            "--pin=""$pin"""
          ) -join " "

          Write-Output "::add-mask::$code"
          Write-Output "::add-mask::$pin"

          "CRD_ARGS=$args" | Out-File -FilePath $env:GITHUB_ENV -Append
          "CRD_NAME=$name"  | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Register CRD host AS the target account (loads user profile)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $sec = ConvertTo-SecureString $env:TARGET_PASS -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ("$env:COMPUTERNAME\$env:TARGET_USER", $sec)
          Write-Host "Launching as $($env:TARGET_USER) ..."
          Start-Process -FilePath "$env:CRD_START_HOST" `
                        -ArgumentList $env:CRD_ARGS `
                        -Credential $cred `
                        -LoadUserProfile `
                        -Wait

      - name: Verify CRD & system status
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "=== Services ==="
          Get-Service TermService -ErrorAction SilentlyContinue | Format-Table -Auto
          $svc = Get-Service chromoting -ErrorAction SilentlyContinue
          if ($svc) { $svc | Format-Table -Auto }
          Write-Host "`n=== Host entry (tail) ==="
          $log = "C:\ProgramData\Google\Chrome Remote Desktop\host.log"
          if (Test-Path $log) { Get-Content $log -Tail 80 }
          Write-Host "`n=== Whoami / Groups ==="
          whoami /all

      - name: Show connection instructions + keep alive
        shell: pwsh
        run: |
          Write-Host "====================================================="
          Write-Host " ✅ Chrome Remote Desktop registration attempted."
          Write-Host "    Name: $env:CRD_NAME"
          Write-Host "    Sign into the SAME Google account used to create the code,"
          Write-Host "    then open: https://remotedesktop.google.com/access"
          Write-Host "    Your host should appear as: $env:CRD_NAME"
          Write-Host "-----------------------------------------------------"
          Write-Host "Note: RDP is enabled locally for completeness, but GitHub-hosted"
          Write-Host "runners do not accept inbound connections from the internet."
          Write-Host "Use Chrome Remote Desktop for access."
          Write-Host "====================================================="
          Start-Sleep -Seconds (60 * [int]$env:TTL_MIN)
