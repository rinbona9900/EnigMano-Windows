name: "‚ö° EnigMano GCRD Windows 10"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      SSH_CODE_OR_CMD:
        description: "Paste the entire 'Setup via SSH' command OR just the OAuth code"
        required: true
        default: ""
      GCRD_PIN:
        description: "PIN (‚â•6 digits). Leave blank to use digits derived from 'EnigMano'"
        required: false
        default: ""
      NEW_USERNAME:
        description: "Create this admin (leave blank to use runneradmin)"
        required: false
        default: ""
      NEW_PASSWORD:
        description: "Password for NEW_USERNAME (ignored if blank)"
        required: false
        default: ""
      GCRD_REDIRECT_URL:
        description: "Redirect URL (leave default unless Google changes it)"
        required: false
        default: "https://remotedesktop.google.com/_/oauthredirect"

jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest
    permissions:
      contents: read
      actions: write

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      REPO: ${{ github.repository }}
      DEPLOYMENT_ID: ${{ github.run_id }}

      SSH_CODE_OR_CMD: ${{ github.event.inputs.SSH_CODE_OR_CMD }}
      GCRD_PIN_INPUT: ${{ github.event.inputs.GCRD_PIN }}
      NEW_USERNAME_INPUT: ${{ github.event.inputs.NEW_USERNAME }}
      NEW_PASSWORD_INPUT: ${{ github.event.inputs.NEW_PASSWORD }}
      GCRD_REDIRECT_URL_INPUT: ${{ github.event.inputs.GCRD_REDIRECT_URL }}

    steps:
      # 1) Warm-up + Normalize inputs (code/redirect/pin/user)
      - name: "‚ú® Warm-Up (50s) & Normalize"
        shell: pwsh
        run: |
          Write-Host "üïí Warming up runner for 50 seconds..."
          Start-Sleep -Seconds 50

          function Fail($m){ Write-Error $m; exit 1 }

          # Parse OAuth code (accept full command or just code)
          $raw = $env:SSH_CODE_OR_CMD
          if (-not $raw) { Fail "Missing SSH_CODE_OR_CMD." }
          $code = $null
          if ($raw -match '--code="([^"]+)"') {
            $code = $Matches[1]
          } elseif ($raw -match '^\s*"%PROGRAMFILES\(X86\)%\\Google\\Chrome Remote Desktop\\CurrentVersion\\remoting_start_host\.exe"') {
            Fail "Could not parse --code from the provided command. Paste full command again or just the code."
          } else {
            $code = $raw.Trim()
          }
          if (-not $code) { Fail "Empty OAuth code after parsing." }

          # Redirect URL
          $redirect = $env:GCRD_REDIRECT_URL_INPUT
          if (-not $redirect) { $redirect = "https://remotedesktop.google.com/_/oauthredirect" }
          if ($raw -match '--redirect-url="([^"]+)"') { $redirect = $Matches[1] }

          # PIN (numeric ‚â•6) or derived from "EnigMano"
          function Convert-ToT9($text){
            $map = @{
              'A'=2;'B'=2;'C'=2; 'D'=3;'E'=3;'F'=3; 'G'=4;'H'=4;'I'=4;
              'J'=5;'K'=5;'L'=5; 'M'=6;'N'=6;'O'=6; 'P'=7;'Q'=7;'R'=7;'S'=7;
              'T'=8;'U'=8;'V'=8; 'W'=9;'X'=9;'Y'=9;'Z'=9
            }
            ($text.ToUpper().ToCharArray() | ForEach-Object {
              if ($map.ContainsKey($_)) { $map[$_] }
              elseif ($_ -match '\d') { $_ }
            }) -join ''
          }
          $userPin = $env:GCRD_PIN_INPUT
          if ($userPin -and ($userPin -match '^\d{6,}$')) {
            $pin = $userPin
          } else {
            $t9 = Convert-ToT9 "EnigMano"   # -> 3644266
            $pin = if ($t9 -and $t9.Length -ge 6) { $t9 } else { "919191" }
          }

          # Target user: NEW_* or runneradmin/Enigman0
          if ($env:NEW_USERNAME_INPUT) {
            if (-not $env:NEW_PASSWORD_INPUT) { Fail "NEW_PASSWORD is required when NEW_USERNAME is provided." }
            $user = $env:NEW_USERNAME_INPUT
            $pass = $env:NEW_PASSWORD_INPUT
          } else {
            $user = "runneradmin"
            $pass = "Enigman0"
          }

          # Export for next steps
          "GCRD_CODE=$code"         | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "GCRD_REDIRECT=$redirect" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "GCRD_PIN=$pin"           | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TARGET_USER=$user"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TARGET_PASS=$pass"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Mask sensitive
          Write-Host "::add-mask::$code"
          Write-Host "::add-mask::$pass"
          Write-Host "::add-mask::$pin"

          Write-Host ("‚úÖ Normalized: User=" + $user + " | Redirect=" + $redirect + " | PIN=(hidden)")

      # 2) Ensure admin (runneradmin -> Enigman0 OR create new) + Enable RDP (protocol + firewall + group)
      - name: "üõ°Ô∏è Ensure Admin & Enable RDP"
        shell: pwsh
        run: |
          function Ensure-Admin-NetOnly($u,$p){
            if ($u -ieq "runneradmin") {
              & net user runneradmin $p /y | Out-Null
              & net user runneradmin /active:yes | Out-Null
            } else {
              & net user $u $p /add /y | Out-Null
              & net localgroup administrators $u /add | Out-Null
              & net user $u /active:yes | Out-Null
            }
            & net localgroup "Remote Desktop Users" $u /add | Out-Null
            Write-Host "üë§ Admin ready: $u"
          }
          Ensure-Admin-NetOnly -u $env:TARGET_USER -p $env:TARGET_PASS

          # Enable RDP protocol + firewall
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          New-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 1 -PropertyType DWord -Force | Out-Null
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          Write-Host "ü™ü RDP enabled and firewall opened."

      # 3) Install Chrome Remote Desktop Host & resolve path
      - name: "‚¨áÔ∏è Install CRD Host"
        shell: pwsh
        run: |
          function Fail($m){ Write-Error $m; exit 1 }
          $url = "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi"
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          Write-Host "üåê Downloading CRD Host MSI..."
          Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
          Write-Host "‚öôÔ∏è Installing (silent)..."
          $p = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$msi`" /qn /norestart" -Wait -PassThru
          if ($p.ExitCode -ne 0) { Fail "CRD Host install failed with exit code $($p.ExitCode)" }
          Write-Host "‚úÖ CRD Host installed."

          $x86 = Join-Path ${env:ProgramFiles(x86)} "Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $x64 = Join-Path ${env:ProgramFiles} "Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $exe = if (Test-Path $x86) { $x86 } elseif (Test-Path $x64) { $x64 } else { "" }
          if (-not $exe) { Fail "remoting_start_host.exe not found after installation." }
          "CRD_EXE=$exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host ("üìç CRD Path: " + $exe)

      # 4) Register CRD via SYSTEM wrapper task + poll task result + tail logs + verify host files/service
      - name: "üîê Register CRD (SYSTEM) & Verify"
        shell: pwsh
        run: |
          function Fail($m){ Write-Error $m; exit 1 }

          $wrapper = Join-Path $env:WINDIR "Temp\enigmano-crd-register.ps1"
          $logPath = Join-Path $env:WINDIR "Temp\enigmano-crd-register.log"

          $lines = @(
            '$ErrorActionPreference = "Continue"'
            '$exe = "' + $env:CRD_EXE.Replace('"','\"') + '"'
            '$args = @("--code=' + $env:GCRD_CODE.Replace('"','\"') + '","--redirect-url=' + $env:GCRD_REDIRECT.Replace('"','\"') + '","--name=" + $env:COMPUTERNAME,"--pin=' + $env:GCRD_PIN + '")'
            'try {'
            '  $p = Start-Process -FilePath $exe -ArgumentList $args -NoNewWindow -PassThru -Wait'
            '  "[CRD] ExitCode=" + $p.ExitCode | Out-File -FilePath "' + $logPath + '" -Encoding utf8 -Append'
            '} catch { "[CRD-ERR] " + ($_ | Out-String) | Out-File -FilePath "' + $logPath + '" -Encoding utf8 -Append }'
            'Get-ChildItem "C:\ProgramData\Google\Chrome Remote Desktop" -ErrorAction SilentlyContinue | Out-File -FilePath "' + $logPath + '" -Encoding utf8 -Append'
            'exit $LASTEXITCODE'
          )
          Set-Content -Path $wrapper -Value $lines -Encoding ASCII
          Write-Host ("üß© Wrapper created: " + $wrapper)

          $task  = "EnigManoCRDRegister"
          $start = (Get-Date).AddMinutes(1).ToString("HH:mm")
          $tr    = 'powershell.exe -NoProfile -ExecutionPolicy Bypass -File "' + $wrapper + '"'
          # Run as SYSTEM (no password, highest privileges)
          schtasks /Create /F /RL HIGHEST /SC ONCE /ST $start /TN $task /TR "$tr" /RU "NT AUTHORITY\SYSTEM" | Out-Null
          schtasks /Run /TN $task | Out-Null
          Write-Host "üöÄ Registration task launched as SYSTEM."

          # Poll scheduled task + tail wrapper log; up to ~4 minutes
          $ok = $false
          $attempts = 48
          for ($i=1; $i -le $attempts; $i++) {
            Start-Sleep -Seconds 5

            if (Test-Path $logPath) {
              Write-Host "‚Äî‚Äî CRD wrapper log snapshot ‚Äî‚Äî"
              Get-Content $logPath -ErrorAction SilentlyContinue | Select-Object -Last 15
              Write-Host "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
            }

            $q = schtasks /Query /TN $task /V /FO LIST | Out-String
            $last = ($q | Select-String -Pattern "Last Task Result:\s*(.+)$").Matches.Value
            $status = ($q | Select-String -Pattern "Status:\s*(.+)$").Matches.Value
            if ($last) {
              # Show parsed status/result to logs
              Write-Host ("[TaskStatus] " + ($status -replace 'Status:\s*','') + " | [LastResult] " + ($last -replace 'Last Task Result:\s*',''))
            }

            $hostPaths = @(
              "C:\ProgramData\Google\Chrome Remote Desktop\host.json",
              "C:\ProgramData\Google\Chrome Remote Desktop\host_unprivileged.json"
            ) | Where-Object { Test-Path $_ }

            if ($hostPaths.Count -gt 0) { $ok = $true; break }
          }

          if ($ok) { Write-Host "‚úÖ CRD host registered (host file present)." }
          else { Write-Host "‚ö†Ô∏è Host files not detected; most often this means the OAuth code was expired/used. Generate a fresh code and re-run." }

          # Try to start likely service names (depends on host build)
          foreach($svcName in @("chromoting","ChromeRemoteDesktopService","chromeremotedesktopservice")){
            $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
            if ($svc -and $svc.Status -ne "Running") { try { Start-Service -Name $svcName } catch {} }
          }

          # Keep task artifacts for inspection, but remove the task
          schtasks /Delete /F /TN $task | Out-Null

      # 5) Final Summary (username, password, PIN)
      - name: "üßæ Connection Summary"
        shell: pwsh
        run: |
          $user = $env:TARGET_USER
          $pass = $env:TARGET_PASS
          $pin  = $env:GCRD_PIN
          $pinMasked = if ($pin.Length -gt 2) { ('*' * ($pin.Length-2)) + $pin.Substring($pin.Length-2) } else { $pin }
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## ‚úÖ EnigMano Remote Access Ready"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **Computer Name** : " + $env:COMPUTERNAME)
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **RDP Enabled**   : Yes (firewall opened)")
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **User**          : " + $user)
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **Password**      : " + $pass)
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **CRD Access**    : https://remotedesktop.google.com/access")
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **CRD PIN**       : " + $pinMasked)
          Write-Host ("üîë Credentials -> User=" + $user + " | Pass=" + $pass + " | PIN=" + $pinMasked)
