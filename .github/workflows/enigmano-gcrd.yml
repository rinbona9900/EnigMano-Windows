name: "‚ö° EnigMano GCRD Windows 10"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      SSH_CODE_OR_CMD:
        description: "Paste the entire 'Setup via SSH' command OR just the OAuth code"
        required: true
        default: ""
      GCRD_PIN:
        description: "PIN (‚â•6 digits). Leave blank to use digits derived from 'EnigMano'"
        required: false
        default: ""
      USERNAME:
        description: "Admin user to configure (blank uses 'runneradmin')"
        required: false
        default: ""
      PASSWORD:
        description: "Password for the admin user (blank uses 'P@ssw0rd!')"
        required: false
        default: ""
      GCRD_REDIRECT_URL:
        description: "Redirect URL (leave default unless Google changes it)"
        required: false
        default: "https://remotedesktop.google.com/_/oauthredirect"

jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest
    permissions:
      contents: read
      actions: write

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      REPO: ${{ github.repository }}
      DEPLOYMENT_ID: ${{ github.run_id }}
      WORKFLOW_FILE: "enigmano-gcrd.yml"
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}

      SSH_CODE_OR_CMD: ${{ github.event.inputs.SSH_CODE_OR_CMD }}
      GCRD_PIN_INPUT: ${{ github.event.inputs.GCRD_PIN }}
      USERNAME_INPUT: ${{ github.event.inputs.USERNAME }}
      PASSWORD_INPUT: ${{ github.event.inputs.PASSWORD }}
      GCRD_REDIRECT_URL_INPUT: ${{ github.event.inputs.GCRD_REDIRECT_URL }}

    steps:
      # 1) Warm-up + Normalize
      - name: "‚ú® Warm-Up (50s) & Normalize"
        shell: pwsh
        run: |
          Write-Host "üïí Warming up runner for 50 seconds..."
          Start-Sleep -Seconds 50

          function Fail($m){ Write-Error $m; exit 1 }

          # Parse OAuth code (accept full command or just code)
          $raw = $env:SSH_CODE_OR_CMD
          if (-not $raw) { Fail "Missing SSH_CODE_OR_CMD." }
          $code = $null
          if ($raw -match '--code="([^"]+)"') {
            $code = $Matches[1]
          } elseif ($raw -match '^\s*"%PROGRAMFILES\(X86\)%\\Google\\Chrome Remote Desktop\\CurrentVersion\\remoting_start_host\.exe"') {
            Fail "Could not parse --code from the provided command. Paste full command again or just the code."
          } else {
            $code = $raw.Trim()
          }
          if (-not $code) { Fail "Empty OAuth code after parsing." }

          # Redirect URL
          $redirect = $env:GCRD_REDIRECT_URL_INPUT
          if (-not $redirect) { $redirect = "https://remotedesktop.google.com/_/oauthredirect" }
          if ($raw -match '--redirect-url="([^"]+)"') { $redirect = $Matches[1] }

          # PIN (numeric ‚â•6) or derived from "EnigMano"
          function Convert-ToT9($text){
            $map = @{
              'A'=2;'B'=2;'C'=2; 'D'=3;'E'=3;'F'=3; 'G'=4;'H'=4;'I'=4;
              'J'=5;'K'=5;'L'=5; 'M'=6;'N'=6;'O'=6; 'P'=7;'Q'=7;'R'=7;'S'=7;
              'T'=8;'U'=8;'V'=8; 'W'=9;'X'=9;'Y'=9;'Z'=9
            }
            ($text.ToUpper().ToCharArray() | ForEach-Object {
              if ($map.ContainsKey($_)) { $map[$_] }
              elseif ($_ -match '\d') { $_ }
            }) -join ''
          }
          $userPin = $env:GCRD_PIN_INPUT
          if ($userPin -and ($userPin -match '^\d{6,}$')) {
            $pin = $userPin
          } else {
            $t9 = Convert-ToT9 "EnigMano"   # -> 3644266
            $pin = if ($t9 -and $t9.Length -ge 6) { $t9 } else { "919191" }
          }

          # Admin user defaults
          $user = if ($env:USERNAME_INPUT) { $env:USERNAME_INPUT } else { "runneradmin" }
          $pass = if ($env:PASSWORD_INPUT) { $env:PASSWORD_INPUT } else { "P@ssw0rd!" }

          # Export for next steps
          "GCRD_CODE=$code"         | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "GCRD_REDIRECT=$redirect" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "GCRD_PIN=$pin"           | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TARGET_USER=$user"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TARGET_PASS=$pass"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Mask sensitive
          Write-Host "::add-mask::$code"
          Write-Host "::add-mask::$pass"
          Write-Host "::add-mask::$pin"

          Write-Host "‚úÖ Normalized: User=$user | Redirect=$redirect | PIN=(hidden)"

      # 2) GCRD one-step: ensure admin ‚Üí install ‚Üí register via elevated Scheduled Task (wrapper) ‚Üí verify (with rich logs)
      - name: "üîê Install & Register Chrome Remote Desktop (one-step)"
        shell: pwsh
        run: |
          function Fail($m){ Write-Error $m; exit 1 }

          # Ensure local admin
          $secure = ConvertTo-SecureString $env:TARGET_PASS -AsPlainText -Force
          $exists = Get-LocalUser -Name $env:TARGET_USER -ErrorAction SilentlyContinue
          if ($exists) { Set-LocalUser -Name $env:TARGET_USER -Password $secure } else { New-LocalUser -Name $env:TARGET_USER -Password $secure -FullName $env:TARGET_USER -Description "EnigMano Admin" | Out-Null }
          try { Add-LocalGroupMember -Group "Administrators" -Member $env:TARGET_USER -ErrorAction SilentlyContinue } catch {}
          & net user $env:TARGET_USER /active:yes | Out-Null
          Write-Host "üëë Admin ensured: $env:TARGET_USER"

          # Install CRD Host
          $url = "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi"
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          Write-Host "‚¨áÔ∏è  Downloading CRD Host MSI..."
          Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
          Write-Host "‚öôÔ∏è  Installing CRD (silent)..."
          $p = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$msi`" /qn /norestart" -Wait -PassThru
          if ($p.ExitCode -ne 0) { Fail "CRD install failed with exit code $($p.ExitCode)" }
          Write-Host "‚úÖ CRD installed."

          # Resolve CRD exe path
          $x86 = Join-Path ${env:ProgramFiles(x86)} "Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $x64 = Join-Path ${env:ProgramFiles} "Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $exe = if (Test-Path $x86) { $x86 } elseif (Test-Path $x64) { $x64 } else { "" }
          if (-not $exe) { Fail "remoting_start_host.exe not found." }
          Write-Host "üõ§Ô∏è  CRD path: $exe"

          # Write wrapper (with rich logging) to bypass schtasks /TR length
          $wrapper = Join-Path $env:WINDIR "Temp\enigmano-crd-register.ps1"
          $logPath = Join-Path $env:WINDIR "Temp\enigmano-crd-register.log"
          $ts = 'function TS{Get-Date -Format "yyyy-MM-dd HH:mm:ss"}'
          $l1 = $ts
          $l2 = '$ErrorActionPreference = "Continue"'
          $l3 = '$exe = "' + $exe.Replace('"','\"') + '"'
          $l4 = '$args = @("--code=""' + $env:GCRD_CODE.Replace('"','\"') + '""","--redirect-url=""' + $env:GCRD_REDIRECT.Replace('"','\"') + '""","--name="+$env:COMPUTERNAME,"--pin=' + $env:GCRD_PIN + '")'
          $l5 = '("[{0}] Starting registration..." -f (TS)) | Out-File -FilePath "' + $logPath + '" -Encoding utf8 -Append'
          $l6 = 'try {'
          $l7 = '  $p = Start-Process -FilePath $exe -ArgumentList $args -RedirectStandardOutput "' + $logPath + '" -RedirectStandardError "' + $logPath + '" -NoNewWindow -PassThru -Wait'
          $l8 = '  ("[{0}] ExitCode=" + $p.ExitCode -f (TS)) | Out-File -FilePath "' + $logPath + '" -Encoding utf8 -Append'
          $l9 = '} catch { ("[{0}] ERROR: " + $_ | Out-String) -f (TS) | Out-File -FilePath "' + $logPath + '" -Encoding utf8 -Append }'
          $lA = 'Get-ChildItem "C:\ProgramData\Google\Chrome Remote Desktop" -ErrorAction SilentlyContinue | Out-File -FilePath "' + $logPath + '" -Encoding utf8 -Append'
          $lB = 'exit 0'
          Set-Content -Path $wrapper -Value @($l1,$l2,$l3,$l4,$l5,$l6,$l7,$l8,$l9,$lA,$lB) -Encoding ASCII
          Write-Host "üß© Wrapper created: $wrapper"

          # Create elevated Scheduled Task to run wrapper as target admin
          $task  = "EnigManoCRDRegister"
          $start = (Get-Date).AddMinutes(1).ToString("HH:mm")
          $tr    = 'powershell.exe -NoProfile -ExecutionPolicy Bypass -File "' + $wrapper + '"'
          schtasks /Create /F /RL HIGHEST /SC ONCE /ST $start /TN $task /TR "$tr" /RU "$($env:TARGET_USER)" /RP "$($env:TARGET_PASS)" | Out-Null
          schtasks /Run /TN $task | Out-Null
          Write-Host "üöÄ CRD registration task launched as $env:TARGET_USER."

          # Firewall allow (defensive)
          try { New-NetFirewallRule -DisplayName "Chrome Remote Desktop Host" -Direction Outbound -Program $exe -Action Allow -Profile Any -ErrorAction SilentlyContinue | Out-Null } catch {}

          # Helper to check service
          function Ensure-Service{
            param([string]$n)
            $s = Get-Service -Name $n -ErrorAction SilentlyContinue
            if ($s -and $s.Status -ne "Running") { try { Start-Service -Name $n } catch {} }
          }

          # Wait up to ~3 minutes for host to register; show wrapper logs and retry once if exit looks bad
          $ok = $false
          $retried = $false
          for ($i=1; $i -le 36; $i++) {
            Start-Sleep -Seconds 5

            Ensure-Service "chromoting"
            Ensure-Service "ChromeRemoteDesktopService"

            if (Test-Path $logPath) {
              Write-Host "‚Äî‚Äî CRD wrapper log snapshot ‚Äî‚Äî"
              Get-Content $logPath -ErrorAction SilentlyContinue | Select-Object -Last 15
              Write-Host "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"

              # If we clearly see ExitCode=1 and haven't retried yet, retry once
              $tail = (Get-Content $logPath -ErrorAction SilentlyContinue | Select-Object -Last 5) -join " "
              if (-not $retried -and ($tail -match 'ExitCode=1')) {
                $retried = $true
                Write-Host "‚ôªÔ∏è  Retrying registration once..."
                schtasks /Run /TN $task | Out-Null
              }
            }

            $hostPaths = @(
              "C:\ProgramData\Google\Chrome Remote Desktop\host.json",
              "C:\ProgramData\Google\Chrome Remote Desktop\host_unprivileged.json"
            ) | Where-Object { Test-Path $_ }

            if ($hostPaths.Count -gt 0) { $ok = $true; break }
          }

          if ($ok) { Write-Host "‚úÖ CRD host registered (host file present)." }
          else { Write-Host "‚ö†Ô∏è  Host files not detected; most often this means the OAuth code was expired/used. Generate a fresh code and re-run." }

          # Cleanup task (keep wrapper/log for inspection)
          schtasks /Delete /F /TN $task | Out-Null

      # 3) Download EnigMano script from GitLab
      - name: "üì• Fetch EnigMano-Instance.ps1"
        shell: pwsh
        run: |
          $url = "https://gitlab.com/Shahzaib-YT/enigmano-win10-with-sound/-/raw/main/EnigMano-Instance.ps1"
          Invoke-WebRequest -Uri $url -OutFile "EnigMano-Instance.ps1" -UseBasicParsing
          if (!(Test-Path "./EnigMano-Instance.ps1")) {
            Write-Error "Failed to download EnigMano-Instance.ps1"
            exit 1
          }
          Write-Host "‚úÖ EnigMano-Instance.ps1 downloaded."

      # 4) Always run PS1 after GCRD setup
      - name: "‚öîÔ∏è Execute EnigMano-Instance.ps1"
        shell: pwsh
        run: |
          Write-Host "üö¶ Running EnigMano-Instance.ps1"
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-Instance.ps1"

      # 5) Final Summary (show username, password, PIN)
      - name: "üßæ Connection Summary"
        shell: pwsh
        run: |
          $user = $env:TARGET_USER
          $pass = $env:TARGET_PASS
          $pin  = $env:GCRD_PIN
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## ‚úÖ EnigMano Completed"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **Computer Name** : " + $env:COMPUTERNAME)
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **User Context**  : " + $user)
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **Password**      : " + $pass)
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **CRD Access**    : https://remotedesktop.google.com/access")
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ("- **CRD PIN**       : " + $pin)
          Write-Host ("üîë Credentials -> User=" + $user + " | Pass=" + $pass + " | PIN=" + $pin)
