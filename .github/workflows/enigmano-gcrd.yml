name: "‚ö° EnigMano GCRD Windows 10"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number"
        required: true
        default: "1"
      SSH_CODE_OR_CMD:
        description: "Paste the entire 'Setup via SSH' command OR just the OAuth code"
        required: true
        default: ""
      GCRD_PIN:
        description: "PIN (‚â•6 digits). Leave blank to use the word 'EnigMano' (auto-converted to digits)"
        required: false
        default: ""
      USERNAME:
        description: "Admin user to configure (blank uses 'runneradmin')"
        required: false
        default: ""
      PASSWORD:
        description: "Password for the admin user (blank uses 'P@ssw0rd!')"
        required: false
        default: ""
      GCRD_REDIRECT_URL:
        description: "Redirect URL (leave default unless Google changes it)"
        required: false
        default: "https://remotedesktop.google.com/_/oauthredirect"
      RUN_ENIGMANO_PS1_AFTER:
        description: "Run EnigMano-Instance.ps1 after CRD setup? (yes/no)"
        required: false
        default: "yes"

jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest
    permissions:
      contents: read
      actions: write

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      REPO: ${{ github.repository }}
      DEPLOYMENT_ID: ${{ github.run_id }}
      WORKFLOW_FILE: "enigmano-gcrd.yml"
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}

      SSH_CODE_OR_CMD: ${{ github.event.inputs.SSH_CODE_OR_CMD }}
      GCRD_PIN_INPUT: ${{ github.event.inputs.GCRD_PIN }}
      USERNAME_INPUT: ${{ github.event.inputs.USERNAME }}
      PASSWORD_INPUT: ${{ github.event.inputs.PASSWORD }}
      GCRD_REDIRECT_URL_INPUT: ${{ github.event.inputs.GCRD_REDIRECT_URL }}
      RUN_ENIGMANO_PS1_AFTER_INPUT: ${{ github.event.inputs.RUN_ENIGMANO_PS1_AFTER }}

    steps:
      - name: ‚ú® Banner
        shell: pwsh
        run: |
          Write-Host @"
          ----------------------------------------------------
                   ENIGMANO GCRD BOOTSTRAP INITIALIZING
          ----------------------------------------------------
            STATUS    : Preparing headless remote access
            ARCHITECT : SHAHZAIB-YT
            INSTANCE  : $env:INSTANCE_ID
          ----------------------------------------------------
          "@

      - name: üìå Echo Parameters (safe)
        shell: pwsh
        run: |
          Write-Host "==============================================="
          Write-Host "üì¶ Repo               : $env:REPO"
          Write-Host "üÜî Deployment ID      : $env:DEPLOYMENT_ID"
          Write-Host "üñ•Ô∏è  Instance ID        : $env:INSTANCE_ID"
          Write-Host "üë§ User (requested)    : " + ($(if($env:USERNAME_INPUT){$env:USERNAME_INPUT}else{"runneradmin"}))
          Write-Host "üîó Redirect URL       : $env:GCRD_REDIRECT_URL_INPUT"
          Write-Host "üîë PIN Provided?      : " ($env:GCRD_PIN_INPUT -ne "" )
          Write-Host "‚ñ∂Ô∏è  Run PS1 After?      : $env:RUN_ENIGMANO_PS1_AFTER_INPUT"
          Write-Host "==============================================="

      - name: üß™ Normalize inputs (OAuth code, redirect, PIN, user) + set flags
        shell: pwsh
        run: |
          function Fail($m){ Write-Error $m; exit 1 }

          # --- OAuth code: accept full command or just code ---
          $raw = $env:SSH_CODE_OR_CMD
          if (-not $raw) { Fail "‚ùå Missing SSH_CODE_OR_CMD." }

          $code = $null
          if ($raw -match '--code="([^"]+)"') {
            $code = $Matches[1]
          } elseif ($raw -match '^\s*"%PROGRAMFILES\(X86\)%\\Google\\Chrome Remote Desktop\\CurrentVersion\\remoting_start_host\.exe"') {
            Fail "‚ùå Could not parse --code from the provided command. Paste the full command again or just the code."
          } else {
            $code = $raw.Trim()
          }
          if (-not $code) { Fail "‚ùå Empty OAuth code after parsing." }

          # --- Redirect URL ---
          $redirect = $env:GCRD_REDIRECT_URL_INPUT
          if (-not $redirect) { $redirect = "https://remotedesktop.google.com/_/oauthredirect" }
          if ($raw -match '--redirect-url="([^"]+)"') { $redirect = $Matches[1] }

          # --- PIN logic ---
          $userPin = $env:GCRD_PIN_INPUT
          function Convert-ToT9($text){
            $map = @{
              'A'=2;'B'=2;'C'=2; 'D'=3;'E'=3;'F'=3; 'G'=4;'H'=4;'I'=4;
              'J'=5;'K'=5;'L'=5; 'M'=6;'N'=6;'O'=6; 'P'=7;'Q'=7;'R'=7;'S'=7;
              'T'=8;'U'=8;'V'=8; 'W'=9;'X'=9;'Y'=9;'Z'=9
            }
            ($text.ToUpper().ToCharArray() | ForEach-Object {
              if ($map.ContainsKey($_)) { $map[$_] }
              elseif ($_ -match '\d') { $_ }
            }) -join ''
          }
          if ($userPin -and ($userPin -match '^\d{6,}$')) {
            $pin = $userPin
            $pinSource = "input"
          } else {
            $t9 = Convert-ToT9 "EnigMano"   # -> 3644266
            if ($t9 -and $t9.Length -ge 6) {
              $pin = $t9
              $pinSource = "derived-from-EnigMano"
            } else {
              $pin = "919191"
              $pinSource = "fallback"
            }
          }

          # --- User defaults ---
          $user = if ($env:USERNAME_INPUT) { $env:USERNAME_INPUT } else { "runneradmin" }
          $pass = if ($env:PASSWORD_INPUT) { $env:PASSWORD_INPUT } else { "P@ssw0rd!" }

          # --- Whether to run PS1 afterward ---
          $runStr = ($env:RUN_ENIGMANO_PS1_AFTER_INPUT + "").ToLower()
          $runPs1 = if ($runStr -match '^(y|yes|true|1)$') { 'true' } else { 'false' }

          # Export normalized values & flag
          "GCRD_CODE=$code"         | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "GCRD_REDIRECT=$redirect" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "GCRD_PIN=$pin"           | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TARGET_USER=$user"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TARGET_PASS=$pass"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RUN_PS1=$runPs1"         | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Mask secrets
          Write-Host "::add-mask::$code"
          Write-Host "::add-mask::$pass"
          Write-Host "::add-mask::$pin"

          Write-Host "::notice title=GCRD Normalized::Code captured. Redirect: $redirect. PIN source: $pinSource. User: $user. Run PS1: $runPs1"

      - name: üë§ Ensure local admin exists & is enabled
        shell: pwsh
        run: |
          function Ensure-LocalAdmin($u,$p){
            $secure = ConvertTo-SecureString $p -AsPlainText -Force
            $exists = Get-LocalUser -Name $u -ErrorAction SilentlyContinue
            if ($exists) {
              Set-LocalUser -Name $u -Password $secure
              Write-Host "üîê Reset password for existing user '$u'."
            } else {
              New-LocalUser -Name $u -Password $secure -FullName $u -Description "EnigMano Admin"
              Write-Host "üë§ Created local user '$u'."
            }
            try { Add-LocalGroupMember -Group "Administrators" -Member $u -ErrorAction SilentlyContinue } catch {}
            & net user $u /active:yes | Out-Null
            Write-Host "üõ°Ô∏è  '$u' ensured as local administrator and set active."
          }
          Ensure-LocalAdmin -u $env:TARGET_USER -p $env:TARGET_PASS

      - name: üß© Install Chrome Remote Desktop Host (retry)
        shell: pwsh
        run: |
          function Fail($m){ Write-Error $m; exit 1 }
          $url = "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi"
          $msi = Join-Path $env:TEMP "chromeremotedesktophost.msi"
          for ($i=1; $i -le 3; $i++) {
            try {
              Write-Host "üåê Download attempt $i ..."
              Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
              if (Test-Path $msi) { break }
            } catch {
              if ($i -eq 3) { Fail "‚ùå Failed to download CRD MSI after 3 attempts: $_" }
              Start-Sleep -Seconds (5*$i)
            }
          }
          Write-Host "üõ†Ô∏è  Installing (silent)..."
          $args = "/i `"$msi`" /qn /norestart"
          $p = Start-Process -FilePath "msiexec.exe" -ArgumentList $args -Wait -PassThru
          if ($p.ExitCode -ne 0) { Fail "‚ùå CRD Host install failed with exit code $($p.ExitCode)" }
          Write-Host "‚úÖ Chrome Remote Desktop Host installed."

      - name: üß≠ Resolve CRD executable path
        shell: pwsh
        run: |
          function Fail($m){ Write-Error $m; exit 1 }
          $x86 = Join-Path ${env:ProgramFiles(x86)} "Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $x64 = Join-Path ${env:ProgramFiles} "Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $exe = $null
          if (Test-Path $x86) { $exe = $x86 }
          elseif (Test-Path $x64) { $exe = $x64 }
          else { Fail "‚ùå remoting_start_host.exe not found after installation." }
          "CRD_EXE=$exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "::notice title=GCRD Path::Using '$exe'"

      - name: üîê Register CRD host under the target admin user (headless)
        shell: pwsh
        run: |
          $sec = ConvertTo-SecureString $env:TARGET_PASS -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($env:TARGET_USER, $sec)
          $args = @(
            "--code=""$env:GCRD_CODE"""
            "--redirect-url=""$env:GCRD_REDIRECT"""
            "--name=""$env:COMPUTERNAME"""
            "--pin=""$env:GCRD_PIN"""
          ) -join ' '
          Write-Host "‚û°Ô∏è  Running CRD registration as '$($env:TARGET_USER)' ..."
          $proc = Start-Process -FilePath $env:CRD_EXE -ArgumentList $args -Credential $cred -PassThru -WindowStyle Hidden
          $proc.WaitForExit()
          Write-Host "üì® remoting_start_host.exe exited with code: $($proc.ExitCode)"

      - name: ü©∫ Verify CRD (service/process/host json)
        shell: pwsh
        run: |
          function Try-GetService([string[]]$names){
            foreach($n in $names){
              $s = Get-Service -Name $n -ErrorAction SilentlyContinue
              if ($s){ return $s }
            }
            return $null
          }

          $svc = Try-GetService @("ChromeRemoteDesktopService","chromeremotedesktopservice")
          if ($svc) {
            Write-Host "::notice title=CRD Service::State = $($svc.Status)"
            if ($svc.Status -ne "Running") { try { Start-Service $svc.Name } catch {} }
          } else {
            Write-Host "::warning title=CRD Service::Service not listed (per-user mode expected)."
          }

          $hostJsons = @(
            "C:\ProgramData\Google\Chrome Remote Desktop\host.json",
            "C:\ProgramData\Google\Chrome Remote Desktop\host_unprivileged.json"
          ) | Where-Object { Test-Path $_ }

          if ($hostJsons.Count -gt 0) {
            Write-Host "::notice title=CRD Host Files::Found -> $($hostJsons -join ', ')"
          } else {
            Write-Host "::warning title=CRD Host Files::Not found yet (may be per-user)."
          }

          $proc = Get-Process -Name "remoting_host","remote_assistance_host" -ErrorAction SilentlyContinue
          if ($proc) {
            Write-Host "::notice title=CRD Process::$(($proc | Select-Object -ExpandProperty ProcessName) -join ', ')"
          } else {
            Write-Host "::warning title=CRD Process::Not visible in system session (may still be active under user session)."
          }

      - name: üßæ Connection Summary
        shell: pwsh
        run: |
          $pin = $env:GCRD_PIN
          $tail = if ($pin.Length -ge 2) { $pin.Substring($pin.Length-2) } else { $pin }
          $pinMasked = ('*' * [Math]::Max(0,$pin.Length-2)) + $tail
          @"
          ## ‚úÖ EnigMano GCRD is Ready

          - **Computer Name**: $env:COMPUTERNAME
          - **User Context** : $env:TARGET_USER (local admin; active)
          - **Access**       : https://remotedesktop.google.com/access
          - **PIN**          : (masked) $pinMasked
          - **Note**         : If you left PIN blank, the word 'EnigMano' was auto-converted to digits to satisfy GCRD.
          "@ | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: üì• Fetch EnigMano-Instance.ps1 (GitLab / win10)
        if: env.RUN_PS1 == 'true'
        shell: pwsh
        run: |
          $url = "https://gitlab.com/Shahzaib-YT/enigmano-win10-with-sound/-/raw/main/EnigMano-Instance.ps1"
          Write-Host "üåê Downloading EnigMano-Instance.ps1..."
          Invoke-WebRequest -Uri $url -OutFile "EnigMano-Instance.ps1" -UseBasicParsing
          if (!(Test-Path "./EnigMano-Instance.ps1")) {
            Write-Error "‚ùå Failed to download EnigMano-Instance.ps1"
            exit 1
          }
          Write-Host "‚úÖ EnigMano-Instance.ps1 downloaded."

      - name: ‚öîÔ∏è Execute EnigMano-Instance.ps1
        if: env.RUN_PS1 == 'true'
        shell: pwsh
        run: |
          Write-Host "üö¶ Initiating EnigMano-Instance.ps1"
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-Instance.ps1"

      - name: üèÅ Finish
        if: always()
        shell: pwsh
        run: |
          Write-Host "‚úÖ EnigMano GCRD bootstrap completed for Instance $env:INSTANCE_ID."
          Write-Host "üîã Powered by: SHAHZAIB-YT"
          Write-Host "üèÅ Remote access should now be available via Chrome Remote Desktop."
